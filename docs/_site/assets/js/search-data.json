{"0": {
    "doc": "Home",
    "title": "SmarkForm",
    "content": "üîó Live Examples ",
    "url": "/#smarkform",
    
    "relUrl": "/#smarkform"
  },"1": {
    "doc": "Home",
    "title": "Powerful while effortless Markup-driven and Extendable forms.",
    "content": ". SmarkForm is a powerful library for creating markup-driven and extendable forms in web applications. SmarkForm empowers designers to enhance their form templates with advanced capabilities, such as dynamic list manipulation and context-based interactions, with no need to deal with complex JavaScript code. [More‚Ä¶] . Check out our üîó Complete Examples to see what SmarkForm is capable of in a glance!! . ",
    "url": "/#powerful-while-effortless-markup-driven-and-extendable-forms",
    
    "relUrl": "/#powerful-while-effortless-markup-driven-and-extendable-forms"
  },"2": {
    "doc": "Home",
    "title": "Features",
    "content": ". | Markup-driven and Intuitive API. | Easy to use. | Advanced capabilities. | Can hold any data structure expressible in JSON. | Flexible and extendable. | Lightweight yet highly compatible. | More‚Ä¶ | . ",
    "url": "/#features",
    
    "relUrl": "/#features"
  },"3": {
    "doc": "Home",
    "title": "Sample Code:",
    "content": "&lt;ul data-smark='{ type: \"list\", name: \"phones\", of: \"input\", maxItems: 3, }'&gt; &lt;li&gt; &lt;input placeholder='Phone Number' type=\"tel\" data-smark&gt; &lt;button data-smark='{\"action\":\"removeItem\"}'&gt;‚ùå&lt;/button&gt; &lt;/li&gt; &lt;/ul&gt; &lt;button data-smark='{\"action\":\"addItem\",\"context\":\"phones\"}'&gt;‚ûï&lt;/button&gt; . ",
    "url": "/#sample-code",
    
    "relUrl": "/#sample-code"
  },"4": {
    "doc": "Home",
    "title": "Current Status",
    "content": "SmarkForm implementation is stable and fully functional, but not all initially planned requirements are yet implemented. Hence, it‚Äôs not yet in the 1.0.0 version. [üîó More‚Ä¶] . ",
    "url": "/#current-status",
    
    "relUrl": "/#current-status"
  },"5": {
    "doc": "Home",
    "title": "Where to Go Next?",
    "content": "To get started with SmarkForm you can: . | üëâ Follow our üîó Quick Start Guide to rapidly dive in. | . | üëâ Check out our üîó Downloadable Examples to see them in action and/or start tinkering. | . | üëâ ‚Ä¶or just try and modify any of the üîó Available CodePen Examples. | . ",
    "url": "/#where-to-go-next",
    
    "relUrl": "/#where-to-go-next"
  },"6": {
    "doc": "Home",
    "title": "License",
    "content": "üîó MIT . ",
    "url": "/#license",
    
    "relUrl": "/#license"
  },"7": {
    "doc": "Home",
    "title": "Contributing",
    "content": "We welcome any feedback, suggestions, or improvements as we continue to enhance and expand the functionality of SmarkForm. | See the üîó Contributing Section for more details‚Ä¶ | . ",
    "url": "/#contributing",
    
    "relUrl": "/#contributing"
  },"8": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "/",
    
    "relUrl": "/"
  },"9": {
    "doc": "About SmarkForm",
    "title": "About SmarkForm",
    "content": "üìñ Table of Contents . | Introduction | Why SmarkForm | The SmarkForm Approach | . ",
    "url": "/about/about_smarkform",
    
    "relUrl": "/about/about_smarkform"
  },"10": {
    "doc": "About SmarkForm",
    "title": "Introduction",
    "content": "Smarkform is a powerful while effortless Markup-driven and Extendable forms. It simplifies the creation of interactive forms in web applications, empowering designers to utilize custom templates and seamlessly incorporate interaction through contextual actions. Designers can enhance their templates by using their own HTML and CSS, without the need to deal with complex JavaScript code. SmarkForm enables advanced capabilities, such as adding or removing items from a list and dynamically loading options for select dropdowns, even if they depend on the values of any other field in the form. This is achieved simply by means of adding the ‚Äòdata-smark‚Äô property to relevant tags. Developers can leverage these templates as views to import and manipulate complex data in JSON format. They also have the flexibility to access any component in the form tree using simple path-style addresses being able to import/export subforms, react to change events and a lot more‚Ä¶ . They are able to develop custom component types as well which designers can then place wherever they want. üöß Please note that select dropdowns (as explained before) are not yet implemented in the current version (but they are planned for inclusion in the upcoming 1.0.0). Of course, for regular behaviour you can simply use a &lt;select&gt; tag in a regular type = input component. release. ",
    "url": "/about/about_smarkform#introduction",
    
    "relUrl": "/about/about_smarkform#introduction"
  },"11": {
    "doc": "About SmarkForm",
    "title": "Why SmarkForm",
    "content": "Traditional HTML forms are limited in structure and lack flexibility. They only support a single level of discrete key-value pairs, limited to text-only values. However, modern applications often require complex JSON structures with nested objects and arrays, which cannot be directly accommodated by legacy HTML forms. Web component libraries and frameworks address this issue by shifting templating and design logic from the view to the controller layer. However, this approach forces developers to manually implement custom behaviors by connecting multiple form components together. Additionally, it places the burden of dealing with templating and styling details on developers, while designers lose control over the appearance of inner components. As a result, this approach leads to non-reusable and bespoke implementations for each form. ",
    "url": "/about/about_smarkform#why-smarkform",
    
    "relUrl": "/about/about_smarkform#why-smarkform"
  },"12": {
    "doc": "About SmarkForm",
    "title": "The SmarkForm Approach",
    "content": "SmarkForm tackles these limitations by providing a powerful and flexible solution for building forms directly in the markup (view layer) that seamlessly handles deep JSON structures. With SmarkForm, designers can create and modify reusable form components that effortlessly handle complex data structures, including lists (arrays) with predefined maximum and/or minimum number of items, and many other nuances directly handled from the markup. Meanwhile, developers can easily import and export JSON data from the controller layer. This approach allows for greater flexibility and efficiency in form development and maintenance. ",
    "url": "/about/about_smarkform#the-smarkform-approach",
    
    "relUrl": "/about/about_smarkform#the-smarkform-approach"
  },"13": {
    "doc": "Features",
    "title": "Features",
    "content": "üìñ Table of Contents . | Markup-driven and Intuitive API | Easy to use | Advanced capabilities | Can hold any data structure expressible in JSON | Flexible and extendable | Lightweight yet highly compatible | . ",
    "url": "/about/features",
    
    "relUrl": "/about/features"
  },"14": {
    "doc": "Features",
    "title": "Markup-driven and Intuitive API",
    "content": ". | Create powerful interactive forms with just plain HTML. | Just add data-smark attribute to relevant tags and see the magic. | Intuitive option names. | Ex.: &lt;button data-smark='{action: \"addItem\", context: \"myList\"&gt; | . | . ",
    "url": "/about/features#markup-driven-and-intuitive-api",
    
    "relUrl": "/about/features#markup-driven-and-intuitive-api"
  },"15": {
    "doc": "Features",
    "title": "Easy to use",
    "content": ". | Leverage your existing HTML and CSS knowledge to create powerful forms. | No need for extensive JavaScript coding. | . ",
    "url": "/about/features#easy-to-use",
    
    "relUrl": "/about/features#easy-to-use"
  },"16": {
    "doc": "Features",
    "title": "Advanced capabilities",
    "content": ". | Addressable elements by easy-to-read path-style relative or absolute addresses. | Complete separation between View and Controller logic. | Context-based actions (no need to hard-wire context and/or target). | Dynamic and reactive options loading for dropdowns (comming soon). | . ",
    "url": "/about/features#advanced-capabilities",
    
    "relUrl": "/about/features#advanced-capabilities"
  },"17": {
    "doc": "Features",
    "title": "Can hold any data structure expressible in JSON",
    "content": ". | With subforms and arrays. | Allow users to add or remove items from arrays. | Impose lower and upper limits for arrays lengths. | . ",
    "url": "/about/features#can-hold-any-data-structure-expressible-in-json",
    
    "relUrl": "/about/features#can-hold-any-data-structure-expressible-in-json"
  },"18": {
    "doc": "Features",
    "title": "Flexible and extendable",
    "content": ". | JSON import and export capabilities | Local Import and export of any subform instead of the whole one. | Develop your own component types to suit your specific needs. | . ",
    "url": "/about/features#flexible-and-extendable",
    
    "relUrl": "/about/features#flexible-and-extendable"
  },"19": {
    "doc": "Features",
    "title": "Lightweight yet highly compatible",
    "content": ". | Bundled both as modern ES Module and UMD for wide compatibility. | Only 20KB minified! | &gt; 0.25%, browser coverage thanks to Babel | . ",
    "url": "/about/features#lightweight-yet-highly-compatible",
    
    "relUrl": "/about/features#lightweight-yet-highly-compatible"
  },"20": {
    "doc": "History",
    "title": "History",
    "content": "üìñ Table of Contents üöß Work in Progress‚Ä¶ . ",
    "url": "/about/history",
    
    "relUrl": "/about/history"
  },"21": {
    "doc": "Quick Start",
    "title": "Quick Start",
    "content": "üìñ Table of Contents . | Create an HTML document | Create an HTML form | Include SmarkForm Library | Initialize the Form | Customize your form | . To create a SmarkForm form, you need to follow a few simple steps: . ",
    "url": "/getting_started/quick_start",
    
    "relUrl": "/getting_started/quick_start"
  },"22": {
    "doc": "Quick Start",
    "title": "Create an HTML document",
    "content": "For a fast setup, you can simply pick our boilerplate template from the Download Section. ",
    "url": "/getting_started/quick_start#create-an-html-document",
    
    "relUrl": "/getting_started/quick_start#create-an-html-document"
  },"23": {
    "doc": "Quick Start",
    "title": "Create an HTML form",
    "content": "Start by writing the form markup in HTML. For example, let‚Äôs create a basic login form: . &lt;div id=\"myForm\"&gt; &lt;div&gt; &lt;label for=\"username\"&gt;Username:&lt;/label&gt; &lt;input type=\"text\" id=\"username\" name=\"username\" data-smark=\"data-smark\"&gt; &lt;/div&gt; &lt;div&gt; &lt;label for=\"password\"&gt;Password:&lt;/label&gt; &lt;input type=\"password\" id=\"password\" name=\"password\" data-smark=\"data-smark\"&gt; &lt;/div&gt; &lt;p&gt; &lt;button data-smark='{\"action\":\"empty\"}'&gt;‚ùå Clear&lt;/button&gt; &lt;button data-smark='{\"action\":\"export\"}'&gt;üíæ Submit&lt;/button&gt; &lt;/p&gt; &lt;/div&gt; . üìå It is not (yet) advised to use the &lt;form&gt; tag for SmarkForm forms. If you do so, they will be submit-prevented so they can act as kind of failback behvaviours in case of JavaScript being disabled. But it‚Äôs not yet clear which could be a future enhancenment of native &lt;form&gt; attributes, such as action, in successfully enhanced &lt;form&gt; tags. ",
    "url": "/getting_started/quick_start#create-an-html-form",
    
    "relUrl": "/getting_started/quick_start#create-an-html-form"
  },"24": {
    "doc": "Quick Start",
    "title": "Include SmarkForm Library",
    "content": "Next, include the SmarkForm library in your project. You can do this by adding the script tag to your HTML file or by importing it using a module bundler like Webpack or Parcel. &lt;script src=\"path/to/SmarkForm.js\"&gt;&lt;/script&gt; . üìå Alternatively you can directly import it as ES module in your JavaScript file: . import SmarkForm from 'https://cdn.jsdelivr.net/npm/smarkform/dist/SmarkForm.esm.js'; . See Installation Instructions for more details. ",
    "url": "/getting_started/quick_start#include-smarkform-library",
    
    "relUrl": "/getting_started/quick_start#include-smarkform-library"
  },"25": {
    "doc": "Quick Start",
    "title": "Initialize the Form",
    "content": "Initialize SmarkForm on your form element. In your JavaScript file, create a new instance of the SmarkForm class and pass the form element as the parameter: . const form = new SmarkForm(document.querySelector(\"#myForm\")); . You may also want to do something with data: . const myForm = new SmarkForm( document.getElementById(\"myForm\") , { onAfterAction_export({data}) { // Show exported data: console.log(data); }, } ); . Or even gently ask users for confirmation before they loose all their work: . const form = new SmarkForm( document.querySelector(\"#myForm\") , { onAfterAction_export({data}) { // Show exported data: alert (JSON.stringify(data)); }, async onBeforeAction_empty({context, preventDefault}) { // Ask for confirmation unless form is already empty: if ( ! await context.isEmpty() &amp;&amp; ! confirm(\"Are you sure?\") ) preventDefault(); }, } ); . That‚Äôs it! You now have a SmarkForm-enhanced form. SmarkForm will automatically handle form submission, validation, and other interactions based on the provided markup and configuration. You can customize the behavior and appearance of your SmarkForm form by configuring options and adding event listeners. SmarkForm provides a wide range of features and capabilities to simplify form development and enhance user experience. Start exploring the SmarkForm documentation and examples to discover all the possibilities and unleash the power of markup-driven form development. ",
    "url": "/getting_started/quick_start#initialize-the-form",
    
    "relUrl": "/getting_started/quick_start#initialize-the-form"
  },"26": {
    "doc": "Quick Start",
    "title": "Customize your form",
    "content": "Now you are ready to add advanced features to your form, such as nested forms and variable-length arrays. Check out First Steps Section for examples. It‚Äôs also advisable to take a look on Core Concepts Section for a deeper understanding of what is going on‚Ä¶ . ",
    "url": "/getting_started/quick_start#customize-your-form",
    
    "relUrl": "/getting_started/quick_start#customize-your-form"
  },"27": {
    "doc": "Getting SmarkForm",
    "title": "Getting SmarkForm",
    "content": "üìñ Table of Contents . | Using a CDN (Esiest approach) . | ES module | UMD Module | . | Download minified | Installing it from NPM | Clone from GitHub | . To incorporate SmarkForm to your project you have several alternatives: . ",
    "url": "/getting_started/getting_smarkform#getting-smarkform",
    
    "relUrl": "/getting_started/getting_smarkform#getting-smarkform"
  },"28": {
    "doc": "Getting SmarkForm",
    "title": "Using a CDN (Esiest approach)",
    "content": "This is the quicker method for playground and testing apps. ",
    "url": "/getting_started/getting_smarkform#using-a-cdn-esiest-approach",
    
    "relUrl": "/getting_started/getting_smarkform#using-a-cdn-esiest-approach"
  },"29": {
    "doc": "Getting SmarkForm",
    "title": "ES module",
    "content": "üëâ Import it as ES module: . &lt;script type=\"module\"&gt; import SmarkForm from 'https://cdn.jsdelivr.net/npm/smarkform/dist/SmarkForm.esm.js'; // Use SmarkForm in your code &lt;/script&gt; . ",
    "url": "/getting_started/getting_smarkform#es-module",
    
    "relUrl": "/getting_started/getting_smarkform#es-module"
  },"30": {
    "doc": "Getting SmarkForm",
    "title": "UMD Module",
    "content": "üëâ Include it your HTML file using a &lt;script&gt; tag: . &lt;script src=\"https://cdn.jsdelivr.net/npm/smarkform/dist/SmarkForm.umd.js\"&gt;&lt;/script&gt; &lt;script&gt; // Now it is avalable as SmarkForm global variable. &lt;/script&gt; . üëâ Import as CommonJS module: . const SmarkForm = require(\"https://cdn.jsdelivr.net/npm/smarkform/dist/SmarkForm.umd.js\"); . üëâ Import as AMD (RequireJS) module: . require(['https://cdn.jsdelivr.net/npm/smarkform/dist/SmarkForm.umd.js'], function(SmarkForm) { // Now it is avalable as SmarkForm local variable. }); . üìå These examples will use the latest published version of SmarkForm from NPM (better for development / testing / training). For production code is advised to rely on specific version CDN to keep it working despite any future changes. See CDN Resources section for more details‚Ä¶ . ",
    "url": "/getting_started/getting_smarkform#umd-module",
    
    "relUrl": "/getting_started/getting_smarkform#umd-module"
  },"31": {
    "doc": "Getting SmarkForm",
    "title": "Download minified",
    "content": "Go to Download section to obtain a minified versionof Smarkform you can then serve toghether with your app. ",
    "url": "/getting_started/getting_smarkform#download-minified",
    
    "relUrl": "/getting_started/getting_smarkform#download-minified"
  },"32": {
    "doc": "Getting SmarkForm",
    "title": "Installing it from NPM",
    "content": "üëâ Execute: . npm install smarkform . üëâ Then you can use it with your favourite bundler or pick it in your preferred format: . node_modules ‚îî‚îÄ‚îÄ smarkform ‚îî‚îÄ‚îÄ dist ‚îú‚îÄ‚îÄ SmarkForm.esm.js ‚îî‚îÄ‚îÄ SmarkForm.umd.js . SmarkForm.umd.js can be loaded through any UMD compatibley module loader such as RequireJS among others or just with regular &lt;script&gt; tag, in which case it will export SmarkForm class as global variable. ",
    "url": "/getting_started/getting_smarkform#installing-it-from-npm",
    
    "relUrl": "/getting_started/getting_smarkform#installing-it-from-npm"
  },"33": {
    "doc": "Getting SmarkForm",
    "title": "Clone from GitHub",
    "content": "üëâ Execute: . git clone git@github.com:bitifet/SmarkForm.git . üëâ Then, like with NPM package, you will find it under dist directory: . dist ‚îú‚îÄ‚îÄ SmarkForm.esm.js ‚îî‚îÄ‚îÄ SmarkForm.umd.js . You can also install dev dependencies by running npm install and then . | npm run build: To build after doing some change. | npm run dev: To build and watch for any source file change and auto rebuild as needed. | npm run test: To run automated tests. | npm start: To run Express server with the playground environment. | . ",
    "url": "/getting_started/getting_smarkform#clone-from-github",
    
    "relUrl": "/getting_started/getting_smarkform#clone-from-github"
  },"34": {
    "doc": "Getting SmarkForm",
    "title": "Getting SmarkForm",
    "content": " ",
    "url": "/getting_started/getting_smarkform",
    
    "relUrl": "/getting_started/getting_smarkform"
  },"35": {
    "doc": "First Steps",
    "title": "First Steps",
    "content": "üìñ Table of Contents üöß Work in Progress‚Ä¶ . ",
    "url": "/getting_started/first_steps",
    
    "relUrl": "/getting_started/first_steps"
  },"36": {
    "doc": "Core Concepts",
    "title": "Core Concepts",
    "content": "üìñ Table of Contents . | Forms, Lists and Fields . | Fields | Component nesting | Lists | Triggers | Triggers target | Behaviour tunning | Constraining lists | Singletons | Addressability | More‚Ä¶ | . | The data-smark Attribute . | Syntax | Shorthand Syntaxes . | String Value | No value at all | . | . | Mandatory properties | Components and Actions . | Components | Actions | Trigger Components | . | Accessing Components | . The code examples in this section have been designed to provide a clearer understanding of the concepts they illustrate. In most real-world scenarios, these examples may not be the best choices. For instance, we will seldom need to use onRendered callbacks, as all form interactions will be handled through trigger components. ",
    "url": "/getting_started/core_concepts",
    
    "relUrl": "/getting_started/core_concepts"
  },"37": {
    "doc": "Core Concepts",
    "title": "Forms, Lists and Fields",
    "content": "When we initialize a SmarkForm instance over some DOM element, it is enhanced as a SmarkForm form component which is returned as our root form. const myForm = new SmarkForm(some_DOM_element); // Or myRootForm . üëâ Then, every inner DOM element with a data-smark attribute, will be enhanced as another SmarkForm component. No matter if it is a direct child or a descendant of any depth. &lt;div id='myForm'&gt; &lt;!-- SmarkForm Component --&gt; &lt;input name='userId' data-smark&gt; &lt;!-- SmarkForm Component --&gt; &lt;div&gt; &lt;input name='name' data-smark /&gt; &lt;!-- SmarkForm Component --&gt; &lt;input name='surname' data-smark /&gt; &lt;!-- SmarkForm Component --&gt; &lt;/div&gt; &lt;script&gt; const myForm = new SmarkForm(document.getElementById(\"myForm\")); &lt;/script&gt; &lt;/div&gt; . ",
    "url": "/getting_started/core_concepts#forms-lists-and-fields",
    
    "relUrl": "/getting_started/core_concepts#forms-lists-and-fields"
  },"38": {
    "doc": "Core Concepts",
    "title": "Fields",
    "content": "üëâ Every SmarkForm component (except triggers) is a form field from and to which we can import and export values. So our root form is also a field (of type ‚Äúform‚Äù) from and to which we can import and export values (JSON objects). myForm.onRendered(function() { this.export().then(console.log); // { \"userId\": \"\", \"name\": \"\", \"surname\": \"\" } this.import({name: \"John\"}) .then(()=&gt;this.export()) .then(console.log) ; // { \"userId\": \"\", \"name\": \"John\", \"surname\": \"\" } }); . Alternatively, you can enhance readability by providing the onRendered callback through the options object and/or using an async function. const myForm = new SmarkForm(document.getElementById(\"myForm\"), { async onRendered() { console.log(await this.export()); // { \"userId\": \"\", \"name\": \"\", \"surname\": \"\" } await this.import({name: \"John\"}); console.log(await this.export()); // { \"userId\": \"\", \"name\": \"John\", \"surname\": \"\" } }, }); . ",
    "url": "/getting_started/core_concepts#fields",
    
    "relUrl": "/getting_started/core_concepts#fields"
  },"39": {
    "doc": "Core Concepts",
    "title": "Component nesting",
    "content": "üëâ This also mean we can nest forms inside other forms as regular fields (holding JSON objects) with no depth limit. &lt;div id='myForm'&gt; &lt;input name='userId' value='0001' data-smark&gt; &lt;div data-smark='{\"type\":\"form\",\"name\":\"personal_data\"}'&gt; &lt;input name='name' value='John' data-smark&gt; &lt;input name='surname' value='Doe' data-smark&gt; &lt;/div&gt; &lt;script&gt; const myForm = new SmarkForm(document.getElementById(\"myForm\"), { async onRendered() { console.log(await this.export()); // { \"userId\": \"0001\", \"personal_data\": { \"name\": \"John\", \"surname\": \"Doe\" } } } }); &lt;/script&gt; &lt;/div&gt; . ",
    "url": "/getting_started/core_concepts#component-nesting",
    
    "relUrl": "/getting_started/core_concepts#component-nesting"
  },"40": {
    "doc": "Core Concepts",
    "title": "Lists",
    "content": "üëâ In case we need arrays, the list component type come to rescue: Likewise forms hold JSON objects, lists hold JSON arrays. So we are able to define simple HTML forms that can import and export any imaginable JSON data. &lt;div data-smark='{\"type\":\"form\",\"name\":\"personal_data\"}'&gt; &lt;input name='name' data-smark&gt; &lt;input name='surname' data-smark&gt; &lt;ul data-smark='{\"type\":\"list\",\"name\":\"pets\", \"sortable\":true}'&gt; &lt;li&gt; &lt;input name='species' data-smark&gt; &lt;input name='name' data-smark&gt; &lt;/li&gt; &lt;/ul&gt; &lt;button data-smark='{\"action\":\"addItem\",\"context\":\"pets\"}'&gt;Add Pet&lt;/button&gt; &lt;button data-smark='{\"action\":\"removeItem\",\"context\":\"pets\"}'&gt;Remove Pet&lt;/button&gt; &lt;/div&gt; . To enable users to control the array‚Äôs length, the list component type offers the ‚ÄúaddItem‚Äù and ‚ÄúremoveItem‚Äù actions. üëâ Actions are functions provided by component types for interaction. They can be triggered by components of the so-called ‚Äútrigger‚Äù type, where the component acts as their context. üëâ Trigger components have a (mandatory) action attribute which specifies the action to be triggered. üëâ In order to improve readability, the action property is not allowed in any other component type and, hence, the \"type\": \"trigger\" become optional (and discouraged). ",
    "url": "/getting_started/core_concepts#lists",
    
    "relUrl": "/getting_started/core_concepts#lists"
  },"41": {
    "doc": "Core Concepts",
    "title": "Triggers",
    "content": "üëâ Trigger components have a ‚Äúnatural context‚Äù which is the closest SmarkForm component conaining it (That is: personal_data subform in previous example) but its actual context is the closest component implementing that action unless overridden by the context property. The context property specifies the relative path, from its natural context to the actual context of the trigger. ",
    "url": "/getting_started/core_concepts#triggers",
    
    "relUrl": "/getting_started/core_concepts#triggers"
  },"42": {
    "doc": "Core Concepts",
    "title": "Triggers target",
    "content": "üëâ Besides the context, trigger components may also have a target consisting of an inner component to which the specified action is performed. The target can be specified using the to property, but it can also have a default value depending on the context‚Äôs component type. In the case of lists, the default target is the list item that contains the trigger component (if it is contained within one) or the last item in the list otherwise. For example, when clicking the ‚ÄúRemove Pet‚Äù button in the previous example, the last pet in the list would be removed. In other words: We can move the removeItem trigger button inside list items allowing users to cherry-pick which item to remove: . &lt;ul data-smark='{\"type\":\"list\",\"name\":\"pets\"}'&gt; &lt;li&gt; &lt;input name='species' data-smark&gt; &lt;input name='name' data-smark&gt; &lt;button data-smark='{\"action\":\"removeItem\"}'&gt;‚ùå&lt;/button&gt; &lt;/li&gt; &lt;/ul&gt; &lt;button data-smark='{\"action\":\"addItem\",\"context\":\"pets\"}'&gt;‚ûï&lt;/button&gt; &lt;!-- (Optionally we can keep both) &lt;button data-smark='{\"action\":\"removeItem\",\"context\":\"pets\"}'&gt;‚ûñ&lt;/button&gt; --&gt; . Similarly, we could have placed an ‚ÄúaddItem‚Äù button too inside the list item template. In that case, new items would be inserted after the item containing the button (its default target) unless if we set the position property to ‚Äúbefore‚Äù. But keep in mind that, if minItems (see Constraining lists below‚Ä¶) is set to 0 you would need at least another external ‚ÄúaddItem‚Äù button to be able to add items to the list when it is empty‚Ä¶ . ",
    "url": "/getting_started/core_concepts#triggers-target",
    
    "relUrl": "/getting_started/core_concepts#triggers-target"
  },"43": {
    "doc": "Core Concepts",
    "title": "Behaviour tunning",
    "content": "üëâ A special case for the ‚Äúto‚Äù property is specifying it as ‚Äú*‚Äù. In this case, the trigger button‚Äôs target will be all items of the list. Which combined (or not) with the keep_non_empty property of list component type‚Äôs removeItem action, may lead to several interesting combinations: . ‚û°Ô∏è Remove last empty pet. If none is empty, remove last one: . &lt;button data-smark='{ \"action\":\"removeItem\", \"context\":\"pets\", \"keep_non_empty\":true }' &gt;Remove Pet&lt;/button&gt; . ‚û°Ô∏è Remove all pets with no filled data: . &lt;button data-smark='{ \"action\":\"removeItem\", \"context\":\"pets\", \"to\":\"*\", \"keep_non_empty\":true }' &gt;Clear Empty Pets&lt;/button&gt; . ‚û°Ô∏è Remove all pets unconditionally: . &lt;button data-smark='{ \"action\":\"removeItem\", \"context\":\"pets\", \"to\":\"*\", }' &gt;Remove All Pets&lt;/button&gt; . ",
    "url": "/getting_started/core_concepts#behaviour-tunning",
    
    "relUrl": "/getting_started/core_concepts#behaviour-tunning"
  },"44": {
    "doc": "Core Concepts",
    "title": "Constraining lists",
    "content": "üëâ By default, lists can hold any number of items, from 1 to infinite. But this can be overridden with minItems and maxItems properties. Example: . &lt;ul data-smark='{ \"type\":\"list\", \"name\":\"pets\", \"minItems\": 0, \"maxItems\": 5, }'&gt; &lt;li&gt; &lt;!-- ... --&gt; &lt;/li&gt; &lt;/ul&gt; . ",
    "url": "/getting_started/core_concepts#constraining-lists",
    
    "relUrl": "/getting_started/core_concepts#constraining-lists"
  },"45": {
    "doc": "Core Concepts",
    "title": "Singletons",
    "content": "üëâ As we have seen, lists can hold any number of subform instances. But if we need a list of just scalar values such as text or numbers (&lt;input&gt;, &lt;textarea&gt;, &lt;select&gt;‚Ä¶) there will be no room for trigger components in list items to, say, remove given item. But the input component type can handle not only single &lt;input&gt;, &lt;selext&gt; and &lt;textarea&gt;tags but also any other tag surrounding a whole subform with the only restriction that only one actual field is allowed (and, in fact, required) inside but allowing the presence of any number of trigger components. This special behavior of the input component type is what we call a singleton, which adheres to the following rules: . | They only allow for a single non trigger component in it. | Does not require (and it‚Äôs not advisable) to provide a name for that component. | When imported or exported, they receive and return only the value ot that field. | . Not only input components are singletons. Also all other components inheriting from it (number, date‚Ä¶) work as singletons too. Example: . &lt;div data-smark='{\"type\":\"form\",\"name\":\"personal_data\"}'&gt; &lt;input name='name' data-smark&gt; &lt;input name='surname' data-smark&gt; &lt;ul data-smark='{\"type\":\"list\",\"name\":\"phones\"}'&gt; &lt;li data-smark='{\"type\":\"input\"}'&gt; &lt;input placeholder='Phone Number' type=\"tel\" data-smark&gt; &lt;button data-smark='{\"action\":\"removeItem\"}'&gt;‚ùå&lt;/button&gt; &lt;/li&gt; &lt;/ul&gt; &lt;button data-smark='{\"action\":\"addItem\",\"context\":\"phones\"}'&gt;‚ûï&lt;/button&gt; &lt;/div&gt; . This forced us to explicitly specify the data-smark property in the list item template. To avoid this we can use the ‚Äúof‚Äù property of the list to specify the desired SmarkForm component type: . &lt;ul data-smark='{\"type\":\"list\",\"name\":\"phones\",\"of\":\"input\"}'&gt; &lt;li&gt; &lt;input placeholder='Phone Number' type=\"text\" data-smark&gt; &lt;button data-smark='{\"action\":\"removeItem\"}'&gt;‚ùå&lt;/button&gt; &lt;/li&gt; &lt;/ul&gt; . ",
    "url": "/getting_started/core_concepts#singletons",
    
    "relUrl": "/getting_started/core_concepts#singletons"
  },"46": {
    "doc": "Core Concepts",
    "title": "Addressability",
    "content": "In the previous examples we have seen the context and to properties that let us pointing to some SmarkForm component from another. It may seem we simply used the value of the name property of the field we want to point to. But, in fact, those were ‚Äúdirectory-like‚Äù relative paths. We also mentioned that our root form is, in fact, a SmarkForm field that imports and exports JSON data. And all SmarkForm fields have a .find() method through which we can get any other fields of the form by providding a relative or absolute (starting with ‚Äò/‚Äô which points to our root). Example:* . myForm.export().then(console.log); // {name:\"\",surname:\"\",phones:[\"\"],pets:[{ species: '', name: '' } ] } const firstPet = myForm.find(\"pets/0\") firstPet.export().then(console.log); // { species: '', name: '' } . ",
    "url": "/getting_started/core_concepts#addressability",
    
    "relUrl": "/getting_started/core_concepts#addressability"
  },"47": {
    "doc": "Core Concepts",
    "title": "More‚Ä¶",
    "content": "Check out our üîó Complete Examples section to better understand these concepts. ",
    "url": "/getting_started/core_concepts#more",
    
    "relUrl": "/getting_started/core_concepts#more"
  },"48": {
    "doc": "Core Concepts",
    "title": "The data-smark Attribute",
    "content": "The data-smark attribute is used in SmarkForm to identify and enhance specific DOM elements (HTML tags) as SmarkForm components. It also provides the required properties for their enhancement. The terms attribute and property may lead to confussion. In this whole manual, we will consistently use the term attribute to refer HTML elemnts attributes and the term property to refer object properties and, specially SmarkForm components‚Äôs properties defined in their data-smark attribute. By using the data-smark attribute, you can mark elements to be transformed into SmarkForm components, while the remaining elements are ignored by SmarkForm. The following are exceptions to this rule: . | The root element (the DOM element passed to the SmarkForm constructor to be enhanced as SmarkForm) is always considered a SmarkForm component. | The item template of a list component, which is the only allowed direct child in the HTML source before rendering, will always be rendered (per each list item) as a SmarkForm component by default. | . üëâ In both cases, the data-smark attribute can be omitted. Example: . &lt;div id=\"myForm\"&gt; &lt;!-- Other form fields... --&gt; &lt;ul data-smark='{\"name\": \"myList\", \"type\": \"list\", \"maxItems\": 5}'&gt; &lt;li&gt; &lt;!-- Template describing list Item's layout --&gt; &lt;/li&gt; &lt;/ul&gt; &lt;!-- Other form fields... --&gt; &lt;/div&gt; &lt;script&gt; const myForm = new SmarkForm(document.getElementById(\"myForm\")); &lt;/script&gt; . In the previous example: . | The outer &lt;div&gt; does not need the data-smark property since it is the DOM element we enhanced as a SmarkForm root form field. | The &lt;li&gt; element is the template that the list component will render as SmarkForm component every time a new item is added to the list. | . ",
    "url": "/getting_started/core_concepts#the-data-smark-attribute",
    
    "relUrl": "/getting_started/core_concepts#the-data-smark-attribute"
  },"49": {
    "doc": "Core Concepts",
    "title": "Syntax",
    "content": "The data-smark attribute should contain a valid JSON object with following attributes: . | type (Mandatory): Which specifies the component type. | name (Recommended): Field name to identify the component in its form level. Defaults to the value of the name attribute of actual HTML tag. If none given, random generated valued will be used instead. | (other‚Ä¶): Depending on actual component type‚Ä¶ . | . üìå There are also exceptions to this rule: . | Any component with the action property is of ‚Äútrigger‚Äù type and hence the type property can be omitted. | Trigger components are not considered form fields and, therefore, they have no name property. | . ",
    "url": "/getting_started/core_concepts#syntax",
    
    "relUrl": "/getting_started/core_concepts#syntax"
  },"50": {
    "doc": "Core Concepts",
    "title": "Shorthand Syntaxes",
    "content": "For the sake of brevity, the data-smark attribute can also be specified in the following alternative ways: . String Value . If only the type needs to be specified, it can be done as a regular string. Example: . | Shorthand: &lt;div data-smark=\"list\"&gt; | Long Form: &lt;div data-smark='{\"type\": \"list\"}'&gt; | . No value at all . Since component type can be infered from actual tag name and attributes, and field name can be provided as regular property, the whole data-smark attribute value can be omitted if we are happy with this inference: . Example: . | Shorthand: &lt;textarea ... data-smark&gt; | Long Form: &lt;textarea data-smark='{}&gt; | Equivalent (type infered) value: &lt;textarea data-smark='{\"type\": \"input\"}&gt; | . ",
    "url": "/getting_started/core_concepts#shorthand-syntaxes",
    
    "relUrl": "/getting_started/core_concepts#shorthand-syntaxes"
  },"51": {
    "doc": "Core Concepts",
    "title": "Mandatory properties",
    "content": "The following properties are (nearly) mandatory: . | The type property is always necessary to determine which component type controller should be used for rendering the component. In many cases, it can be inferred based on the tag name or the presence of the action property, which forces the type to be ‚Äútrigger‚Äù. | The name property is required for all non-trigger components. | If not explicitly provided, it can be inferred from the name property of the tag being enhanced. For example, &lt;input name=\"foo\" data-smark&gt;. | If not provided and cannot be inferred, a randomly generated name will be used. | . | The action property is mandatory for all components of the type ‚Äútrigger‚Äù to specify which action they actually trigger. In fact, the type=\"trigger\" property itself is optional here having it is implied by the presence of the action property. | . Other properties: . Depending on the actual component type other properties may be applicable. In case of triggers, despite typeand name, is worth to mention that, except for the context and to properties . FIXME: To be continued‚Ä¶ //// ** ‚Ä¶ the rest of available properties depend on the type of its context‚Ä¶ . TODO: Link ‚Äòcontext‚Äô and ‚Äòto‚Äô to propper type_trigger.md section‚Ä¶ . ",
    "url": "/getting_started/core_concepts#mandatory-properties",
    
    "relUrl": "/getting_started/core_concepts#mandatory-properties"
  },"52": {
    "doc": "Core Concepts",
    "title": "Components and Actions",
    "content": " ",
    "url": "/getting_started/core_concepts#components-and-actions",
    
    "relUrl": "/getting_started/core_concepts#components-and-actions"
  },"53": {
    "doc": "Core Concepts",
    "title": "Components",
    "content": "A SmarkForm component is just a DOM element (HTML tag) which has a ‚Äúdata-smark‚Äù property providding a JSON-formatted options object. It looks like as follows: . &lt;input data-smark='{type: \"input\"}'/&gt; . üìå If only type option is specified, it can be simplified as: . &lt;input data-smark='input'/&gt; . ‚Ä¶or just leave it empty to let SmarkForm engine to figure out its type: . &lt;input data-smark/&gt; . ",
    "url": "/getting_started/core_concepts#components",
    
    "relUrl": "/getting_started/core_concepts#components"
  },"54": {
    "doc": "Core Concepts",
    "title": "Actions",
    "content": "Actions are operations that can be performed over components. Some of them such as import, export and empty are available for all components types while others are tied to secific types like addItem and removeItem for lists, etc‚Ä¶ . ",
    "url": "/getting_started/core_concepts#actions",
    
    "relUrl": "/getting_started/core_concepts#actions"
  },"55": {
    "doc": "Core Concepts",
    "title": "Trigger Components",
    "content": "Trigger Components are a special type of component that serve to trigger actions on another compoenent which we refer to it as its ‚Äúcontext‚Äù. Any SmarkForm component whith an action property is a Trigger Component and for the sake of simplicity, its type property can be ommitted but it cannot take a different value than ‚Äútrigger‚Äù. Example: . &lt;button data-smark='{action: \"removeItem\"}'&gt;&lt;/button&gt; . üìñ For detailed information see Trigger Type Documentation. ",
    "url": "/getting_started/core_concepts#trigger-components",
    
    "relUrl": "/getting_started/core_concepts#trigger-components"
  },"56": {
    "doc": "Core Concepts",
    "title": "Accessing Components",
    "content": "const form = new SmarkForm( document.querySelector(\"#main-form\") ); . ",
    "url": "/getting_started/core_concepts#accessing-components",
    
    "relUrl": "/getting_started/core_concepts#accessing-components"
  },"57": {
    "doc": "Core Component Types",
    "title": "Core Component Types",
    "content": "üìñ Table of Contents . | Form | List | Input . | Singleton Pattern | . | Number | Date | Select | Trigger | . Core component types are the backbone of SmarkForm: . | Form and List provide the structure that allows to handle any possible JSON data including nested objects and arrays. | The Input component type provide basic support for all HTML form fields (&lt;input&gt;, &lt;textarea&gt; and select) no matter, in case of inputs its actual type attribute. | It also implements the Singleton Pattern. | . | Number and Date component types extend the Input type providding extra sanitation (when importing) and formatting (when exporting). | The Select compenent type (will) üöß not yet implemented üöß provide support for advanced features like dynaic options loading and update, even reacting to changes of other fields in a really transparent manner thanks to the (future) ‚ÄúAPI interface‚Äù. | Triggers, in fact, are not fields. They are used for buttons (or any other elements) to receive interaction events (mouse ‚Äúclick‚Äù by default, but they will be capable to handle others such as keyboard events) and trigger predefined actions on propper components (i.e. adding or removing items to lists). | The good thing about triggers is that they don‚Äôt need any extra wiring to interact with their targeted components. They just target them by their own relative position in the SmarkForm form tree or, at most, with filesystem-like relative paths when necessary. | . | . ",
    "url": "/getting_started/core_component_types",
    
    "relUrl": "/getting_started/core_component_types"
  },"58": {
    "doc": "Core Component Types",
    "title": "Form",
    "content": "In SmarkForm the whole form is a field of the type form which imports and exports JSON data. The keys of that JSON data correspond to the names of the fields in the form. From fields can be created over any HTML tag except for actual HTML form elements (&lt;input&gt;, &lt;textarea&gt;, &lt;select&gt;, &lt;button&gt;‚Ä¶) and can contain any number of SmarkForm fields, including nested forms. Example: . &lt;!-- Create a SmarkForm form with a text Input and a nested form. üëâ The outer form doesn't need the \"data-smark\" attribute having it is the outer form. üëâ In text fields the \"name\" attribute is naturally taken as field name. üëâ In the case of nested form, having &lt;div&gt; tags cannot have a \"name\" attribute, it is provided as a data-smark object property (which is always valid). --&gt; &lt;div id='myForm'&gt; &lt;input data-smark type='text' name='text01'/&gt; &lt;div data-smark='{\"type\":\"form\",\"name\":\"nestedForm\"}'&gt; &lt;input data-smark type='text' name='text01'/&gt; &lt;input data-smark type='text' name='text02'/&gt; &lt;/div&gt; &lt;/div&gt; &lt;script&gt; const myForm = new SmarkForm(document.getElementById(\"myForm\")) &lt;/script&gt; . See also: Form Component Type . ",
    "url": "/getting_started/core_component_types#form",
    
    "relUrl": "/getting_started/core_component_types#form"
  },"59": {
    "doc": "Core Component Types",
    "title": "List",
    "content": "Likewise forms, list inputs can be created over any HTML tag except for actual HTML form elements (&lt;input&gt;, &lt;textarea&gt;, &lt;select&gt;, &lt;button&gt;‚Ä¶). They can contain a variable number of unnamed inputs (list items) that user will be able to add or remove at its own discretion (according certain configurable rules). But in its html source, they must contain exactly one html tag which will be used as a template for its items. Every time a new item is added to the list, this template is automatically rendered as a SmarkForm field (no matter if we explicitly specified the data-smark attribute or not), by default of the type ‚Äúform‚Äù. But other types can be used in case we only want a list of discrete values. To do so we can add the data-smark attribute to the item template or just specify that type in the to property of the data-smark attribute of the list itself. For lists of scalar values, we still may want to include list controls en each item. To do so, scalar input types can be defined like if they were a nested form with a single input (See Singleton Pattern in the Input type section. Example: . &lt;ul data-smark='{ type: \"list\", name: \"phones\", of: \"input\", maxItems: 3, }'&gt; &lt;li&gt; &lt;input placeholder='Phone Number' type=\"tel\" data-smark&gt; &lt;button data-smark='{\"action\":\"removeItem\"}'&gt;‚ùå&lt;/button&gt; &lt;/li&gt; &lt;/ul&gt; &lt;button data-smark='{\"action\":\"addItem\",\"context\":\"phones\"}'&gt;‚ûï&lt;/button&gt; . See also: List Component Type . ",
    "url": "/getting_started/core_component_types#list",
    
    "relUrl": "/getting_started/core_component_types#list"
  },"60": {
    "doc": "Core Component Types",
    "title": "Input",
    "content": " ",
    "url": "/getting_started/core_component_types#input",
    
    "relUrl": "/getting_started/core_component_types#input"
  },"61": {
    "doc": "Core Component Types",
    "title": "Singleton Pattern",
    "content": "See also: Input Component Type . ",
    "url": "/getting_started/core_component_types#singleton-pattern",
    
    "relUrl": "/getting_started/core_component_types#singleton-pattern"
  },"62": {
    "doc": "Core Component Types",
    "title": "Number",
    "content": "See also: Number Component Type . ",
    "url": "/getting_started/core_component_types#number",
    
    "relUrl": "/getting_started/core_component_types#number"
  },"63": {
    "doc": "Core Component Types",
    "title": "Date",
    "content": "See also: Date Component Type . ",
    "url": "/getting_started/core_component_types#date",
    
    "relUrl": "/getting_started/core_component_types#date"
  },"64": {
    "doc": "Core Component Types",
    "title": "Select",
    "content": "See also: Select Component Type . ",
    "url": "/getting_started/core_component_types#select",
    
    "relUrl": "/getting_started/core_component_types#select"
  },"65": {
    "doc": "Core Component Types",
    "title": "Trigger",
    "content": "See also: Trigger Component Type . ",
    "url": "/getting_started/core_component_types#trigger",
    
    "relUrl": "/getting_started/core_component_types#trigger"
  },"66": {
    "doc": "¬´form¬ª Component Type",
    "title": "¬´form¬ª Component Type",
    "content": "üìñ Table of Contents . | Options | Actions . | Action ¬´empty¬ª | . | Other Methods | Events | . ",
    "url": "/component_types/type_form",
    
    "relUrl": "/component_types/type_form"
  },"67": {
    "doc": "¬´form¬ª Component Type",
    "title": "Options",
    "content": " ",
    "url": "/component_types/type_form#options",
    
    "relUrl": "/component_types/type_form#options"
  },"68": {
    "doc": "¬´form¬ª Component Type",
    "title": "Actions",
    "content": " ",
    "url": "/component_types/type_form#actions",
    
    "relUrl": "/component_types/type_form#actions"
  },"69": {
    "doc": "¬´form¬ª Component Type",
    "title": "Action ¬´empty¬ª",
    "content": " ",
    "url": "/component_types/type_form#action-empty",
    
    "relUrl": "/component_types/type_form#action-empty"
  },"70": {
    "doc": "¬´form¬ª Component Type",
    "title": "Other Methods",
    "content": " ",
    "url": "/component_types/type_form#other-methods",
    
    "relUrl": "/component_types/type_form#other-methods"
  },"71": {
    "doc": "¬´form¬ª Component Type",
    "title": "Events",
    "content": " ",
    "url": "/component_types/type_form#events",
    
    "relUrl": "/component_types/type_form#events"
  },"72": {
    "doc": "¬´list¬ª Component Type",
    "title": "¬´list¬ª Component Type",
    "content": "üìñ Table of Contents . | Introduction . | List Component | Usage | . | API Reference . | Options . | min_items | max_items | sortable | of | . | Actions . | (Async) addItem (Action) . | properties (addItem) | . | (Async) removeItem (Action) . | properties (removeItem) | . | (Async) empty (Action) . | properties (empty) | . | count (Action) . | properties (count) | . | . | Events . | addItem (list Event) | removeItem (list Event) | . | . | . ",
    "url": "/component_types/type_list",
    
    "relUrl": "/component_types/type_list"
  },"73": {
    "doc": "¬´list¬ª Component Type",
    "title": "Introduction",
    "content": " ",
    "url": "/component_types/type_list#introduction",
    
    "relUrl": "/component_types/type_list#introduction"
  },"74": {
    "doc": "¬´list¬ª Component Type",
    "title": "List Component",
    "content": "The List component in SmarkForm allows you to dynamically manage a list of items within your form. It uses the content of the container element as the template for each item in the list. ",
    "url": "/component_types/type_list#list-component",
    
    "relUrl": "/component_types/type_list#list-component"
  },"75": {
    "doc": "¬´list¬ª Component Type",
    "title": "Usage",
    "content": "To use the List component, follow these steps: . | Create a form containing the list: . &lt;div id=\"myForm\"&gt; &lt;ul data-smark=\"{name: 'myList' type: 'list'}\"&gt; &lt;li&gt; &lt;!-- Content of this list item will be used as a template for each item --&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;button data-smark='{\"action\":\"empty\"}'&gt;‚ùå Clear&lt;/button&gt; &lt;button data-smark='{\"action\":\"export\"}'&gt;üíæ Submit&lt;/button&gt; &lt;/p&gt; &lt;/div&gt; . | . üìå We could have ommitted the type property because it will be automatically infered by the &lt;ul&gt; type, but it is recommended to explicitly specify types to avoid potential errors in case of markup modifications. | Initialize the SmarkForm instance: . const myForm = new SmarkForm(document.getElementById(\"myForm\")); . üìå This is just a simple example. For detailed explanation of how to build a full-featured SmarkForm see Creating a simple SmarkForm form section of this manual. | Add a template for the list items: . &lt;div id=\"myForm\"&gt; &lt;ul data-smark=\"{name: 'myList' type: 'list'}\"&gt; &lt;li&gt; &lt;input type=\"text\" name=\"field1\" data-smark /&gt; &lt;input type=\"number\" name=\"field2\" data-smark /&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; . üìå List item templates are automatically enhanced as components of type form by default. You can override this by specifying the ‚Äúdata-smark‚Äù attribute explicitly or using the ‚Äúof‚Äù property in the list data-smark attribute. | Add controls to add and remove items: . &lt;div id=\"myForm\"&gt; &lt;ul data-smark=\"{name: 'myList' type: 'list'}\"&gt; &lt;li&gt; &lt;input type=\"text\" name=\"field1\" data-smark /&gt; &lt;input type=\"number\" name=\"field2\" data-smark /&gt; &lt;button data-smark=\"{action='removeItem'}\"&gt;Remove Item&lt;/button&gt; &lt;/li&gt; &lt;/ul&gt; &lt;button data-smark=\"{action='addItem', context='myForm'}\"&gt;Remove Item&lt;/button&gt; &lt;/div&gt; . üìå The removeItem action here takes its containing component (the implicitly created form over &lt;li&gt; template)) as its target (an its containing list as its context). On the other hand, the addItem action, being outside of the list, uses the context property to specify the (relative) path to its context. In this case, being target unspecified, new items will be appended at the end of the list. | . For more information on using the List component and its available methods, please refer to the API Reference. Feel free to adjust the content and structure of the section to match the specific functionality and usage of the List component in your SmarkForm library. ",
    "url": "/component_types/type_list#usage",
    
    "relUrl": "/component_types/type_list#usage"
  },"76": {
    "doc": "¬´list¬ª Component Type",
    "title": "API Reference",
    "content": " ",
    "url": "/component_types/type_list#api-reference",
    
    "relUrl": "/component_types/type_list#api-reference"
  },"77": {
    "doc": "¬´list¬ª Component Type",
    "title": "Options",
    "content": "min_items . Establishes the minimum number of items allowed. | Type: Number | Default value: 1 | Minimum value: 0 | . max_items . Establishes the maximum number of items allowed. | Type: Number | Default value: Infinity | Minimum value: Infinity | . sortable . Controls wether the list can be user sorted by dragging and dropping list items. | Type: Boolean | Default value: false | . of . ",
    "url": "/component_types/type_list#options",
    
    "relUrl": "/component_types/type_list#options"
  },"78": {
    "doc": "¬´list¬ª Component Type",
    "title": "Actions",
    "content": "(Async) addItem (Action) . properties (addItem) . | action: (= ‚ÄúaddItem‚Äù) | origin: | context: | target: | position: = ‚Äúafter‚Äù (default) / ‚Äúbefore‚Äù | autoscroll:, = ‚Äúelegant‚Äù / ‚Äúself‚Äù / ‚Äúparent‚Äù / falsy | . (Async) removeItem (Action) . properties (removeItem) . | action:: (= ‚ÄúremoveItem‚Äù) | origin: | context: | target: | autoscroll:, = ‚Äúelegant‚Äù / ‚Äúself‚Äù / ‚Äúparent‚Äù / falsy | keep_non_empty: | failback: | . (Async) empty (Action) . properties (empty) . | action:: (= ‚Äúempty‚Äù) | . count (Action) . properties (count) . | action:: (= ‚Äúcount‚Äù) | . ",
    "url": "/component_types/type_list#actions",
    
    "relUrl": "/component_types/type_list#actions"
  },"79": {
    "doc": "¬´list¬ª Component Type",
    "title": "Events",
    "content": "The List component emits the following events: . addItem (list Event) . Triggered when a new item is going to be added to the list. This event occurs just after the new item node is created and before it is actually inserted in the DOM. Event data contains the properties received by the originating addItem action, plus the following properties: . | newItemTarget: The new DOM element that is about to be inserted (not yet a component). | onRendered: A callback setter that allows executing code after the item is actually inserted in the DOM and rendered as a new child component of the list. The newly created child component is provided as an argument to the callback. | . Example: . myForm.on(\"addItem\", function({ newItemTarget, onRendered, }) { newItemTarget.classList.add(\"ingoing\"); onRendered((newItem) =&gt; { newItem.target.classList.remove(\"ingoing\"); newItem.target.classList.add(\"ongoing\"); // Alternatively, we could have used just newItemTarget instead of // newItem.target here. }); }); . In this example, we add the CSS class ingoing to the new item before it is rendered, and then change it by the class (ongoing) after it is rendered. This way we can animate the insertion of a new item with a few CSS lines such as follows: .form-group .ingoing { transform: scaleY(0) translateY(-50%); } .form-group .ongoing { transition: transform 70ms ease-in ; } . removeItem (list Event) . Triggered when an item is going to be removed from the list. This event occurs just before removing the item from the DOM and the list itself. Event data contains the properties received by the originating removeItem action, plus the following properties: . | oldItem: The child component (Smark component) of the list that is about to be removed. | oldItemTarget: The DOM element that is about to be removed from the DOM (the target of oldItem). | onRemoved: A callback setter that allows executing code after oldItemTarget is actually removed from the DOM and oldItem is removed from the list. No arguments will be provided to this callback. | . Example: . myForm.on(\"removeItem\", async function({ oldItemTarget, onRemoved, }) { oldItemTarget.classList.remove(\"ongoing\"); oldItemTarget.classList.add(\"outgoing\"); // Await transition to finish before removing the item: const [duration, multiplier = 1000] = window.getComputedStyle(oldItemTarget) .getPropertyValue('transition-duration') .slice(0,-1).replace(\"m\",\"/1\") .split(\"/\") .map(Number) ; await new Promise(resolve =&gt; setTimeout( resolve, duration * multiplier )); }); . In this example, we add the outgoing CSS class to the item being removed so that it can be easily animated with a few CSS such as follows: .form-group .outgoing { transform: scaleY(0) translateY(-50%); transition: transform 70ms ease-out ; } . Then it wait for the specified transition duration to elapse preventing the item being actually removed from the DOM until animation finished. ",
    "url": "/component_types/type_list#events",
    
    "relUrl": "/component_types/type_list#events"
  },"80": {
    "doc": "¬´input¬ª Component Type",
    "title": "¬´input¬ª Component Type",
    "content": "üìñ Table of Contents ",
    "url": "/component_types/type_input",
    
    "relUrl": "/component_types/type_input"
  },"81": {
    "doc": "¬´number¬ª Component Type",
    "title": "¬´number¬ª Component Type",
    "content": "üìñ Table of Contents ",
    "url": "/component_types/type_number",
    
    "relUrl": "/component_types/type_number"
  },"82": {
    "doc": "¬´date¬ª Component Type",
    "title": "¬´date¬ª Component Type",
    "content": "üìñ Table of Contents ",
    "url": "/component_types/type_date",
    
    "relUrl": "/component_types/type_date"
  },"83": {
    "doc": "¬´select¬ª Component Type",
    "title": "¬´select¬ª Component Type",
    "content": "üìñ Table of Contents . | Introduction | . üöß Ôº∑ÔºØÔº≤Ôº´ Ôº©ÔºÆ Ôº∞Ôº≤ÔºØÔºßÔº≤Ôº•Ôº≥Ôº≥ üöß . ",
    "url": "/component_types/type_select",
    
    "relUrl": "/component_types/type_select"
  },"84": {
    "doc": "¬´select¬ª Component Type",
    "title": "Introduction",
    "content": "Select component will be capable of loading its options from a remote API call by passing its src property to so called ‚ÄúAPI Interface‚Äù. Example: . &lt;select data-smark='{ \"src\":[ \"https/example.com/some/api\", { \"someConstant\":\"actual_value\", \"@someField\":\"sibling_field_name\", \"@someOtherField\":\"/absolute/path/to/field\", \"@anotherField\":\"../relative/path/to/field\" }, \"GET\" ] }'&gt; &lt;/select&gt; . Where: . | src[0]: Provides the endpoint url. | If it is the only argument provided, src can be simplified as just that url. | . | src[1]: (Optional) Provides arguments to be passed. | src[2]: (Optional) Specifies the HTTP method (‚ÄòGET‚Äô by default). | . About API Interface: . API Interface will be responsible for fetching the data based on the specified endpoint, arguments, and other parameters (such as the method), while also keeping track of changes in every field it depends on (those marked with initial ‚Äò@‚Äô) allowing the comsummer component (a select in this case, but it may be others in the future) to update its options every time relevant data changes. üëâ One important feature here is the ability to perform the fetching process through an interchangeable callback referred to as an ‚Äòadapter.‚Äô . By default, this adapter internally executes an HTTP request as explained earlier. However, it can be easily substituted with a custom implementation tailored to different types of APIs, ranging from GraphQL APIs to mock implementations used for testing purposes. ",
    "url": "/component_types/type_select#introduction",
    
    "relUrl": "/component_types/type_select#introduction"
  },"85": {
    "doc": "¬´trigger¬ª Component Type",
    "title": "¬´trigger¬ª Component Type",
    "content": "üìñ Table of Contents . | Actions . | Interactions | Origin | Context | Target | . | Trigger Components | . ",
    "url": "/component_types/type_trigger",
    
    "relUrl": "/component_types/type_trigger"
  },"86": {
    "doc": "¬´trigger¬ª Component Type",
    "title": "Actions",
    "content": "Every component type may have its own special methods called actions to interact with it. For example, list components are provided with addItem and removeItem actions to add or remove items from the list. Actions can be triggered both programatically or when user interacts with a trigger component of the given action whose context is a component of given type. ",
    "url": "/component_types/type_trigger#actions",
    
    "relUrl": "/component_types/type_trigger#actions"
  },"87": {
    "doc": "¬´trigger¬ª Component Type",
    "title": "Interactions",
    "content": "Nowadays the only possible interaction for trigger components is the ‚Äòclick‚Äô event. But in the future actions are expected to listen to several events (i.e. right/middle/left click or even keyboard events‚Ä¶) which would be mapped to specific behaviour variations. When the user interacts with an action component, its context is resolved and the propper action method is called in it. ",
    "url": "/component_types/type_trigger#interactions",
    
    "relUrl": "/component_types/type_trigger#interactions"
  },"88": {
    "doc": "¬´trigger¬ª Component Type",
    "title": "Origin",
    "content": "The origin of an action is the actual trigger component from which the action was originated. For programatically triggered actions its value is Null. This allow action implementations to interact with its originating trigger component. ",
    "url": "/component_types/type_trigger#origin",
    
    "relUrl": "/component_types/type_trigger#origin"
  },"89": {
    "doc": "¬´trigger¬ª Component Type",
    "title": "Context",
    "content": "The context of an action is the component willing to receive the action every time it is triggered. That is, by default, the second nearest ancestor (because nearest ancestor is the default target) of the trigger component whose type implements an action of that name. In trigger components the context can be altered by using the context property, consisting a relative (starting from default context) or absolute path to the desired context. This is what allows, for example, to place the addItem trigger components of a list outside of the actual list. Example: . &lt;button data-smark='{\"action\":\"addItem\",\"context\":\"myList\"}'&gt;&lt;/button&gt; &lt;ul data-smark=\"{}\"&gt; &lt;li&gt;...&lt;/li&gt; &lt;/ul&gt; . For convenience context is passed to the action handler by a property of that name even it is always the class of its component type. For programatically triggered actions, context is (as expected) always the component from wihch we call the action. Example: . myForm.find(\"/myList\").removeItem(); . ",
    "url": "/component_types/type_trigger#context",
    
    "relUrl": "/component_types/type_trigger#context"
  },"90": {
    "doc": "¬´trigger¬ª Component Type",
    "title": "Target",
    "content": "The target of an action is the component to which the action is to be peformed. By default it is the nearest ancestor of the trigger component but, as with context, it can be explicitly specified in the target property by a relative or absolute path. For example, in the removeItem action of list components, the target is the item of the list that is going to be removed. Example: . &lt;button data-smark='{\"action\":\"addItem\",\"context\":\"myList\"}'&gt;&lt;/button&gt; &lt;ul data-smark=\"{}\"&gt; &lt;li&gt; ... &lt;button data-smark='{\"action\":\"removeItem\"}'&gt; &lt;/li&gt; &lt;/ul&gt; . ",
    "url": "/component_types/type_trigger#target",
    
    "relUrl": "/component_types/type_trigger#target"
  },"91": {
    "doc": "¬´trigger¬ª Component Type",
    "title": "Trigger Components",
    "content": " ",
    "url": "/component_types/type_trigger#trigger-components",
    
    "relUrl": "/component_types/type_trigger#trigger-components"
  },"92": {
    "doc": "Importing and Exporting Data",
    "title": "Importing and Exporting Data",
    "content": "üìñ Table of Contents üöß Ôº∑ÔºØÔº≤Ôº´ Ôº©ÔºÆ Ôº∞Ôº≤ÔºØÔºßÔº≤Ôº•Ôº≥Ôº≥‚Ä¶ üöß . ",
    "url": "/api_import_and_export/api_import_and_export",
    
    "relUrl": "/api_import_and_export/api_import_and_export"
  },"93": {
    "doc": "The API Interface",
    "title": "The API Interface",
    "content": "üìñ Table of Contents üöß Ôº∑ÔºØÔº≤Ôº´ Ôº©ÔºÆ Ôº∞Ôº≤ÔºØÔºßÔº≤Ôº•Ôº≥Ôº≥‚Ä¶ üöß . ",
    "url": "/the_api_interface/the_api_interface",
    
    "relUrl": "/the_api_interface/the_api_interface"
  },"94": {
    "doc": "Event Handling",
    "title": "Event Handling",
    "content": "üìñ Table of Contents üöß Ôº∑ÔºØÔº≤Ôº´ Ôº©ÔºÆ Ôº∞Ôº≤ÔºØÔºßÔº≤Ôº•Ôº≥Ôº≥‚Ä¶ üöß . ",
    "url": "/events/events",
    
    "relUrl": "/events/events"
  },"95": {
    "doc": "Download",
    "title": "Download",
    "content": "üìñ Table of Contents . | SmarkForm . | Latest version | Older versions | . | Other Resources . | CSS | Boilerplate Template | . | . ",
    "url": "/resources/download",
    
    "relUrl": "/resources/download"
  },"96": {
    "doc": "Download",
    "title": "SmarkForm",
    "content": "SmarkForm is available both as ES Module and UMD formats. ",
    "url": "/resources/download#smarkform",
    
    "relUrl": "/resources/download#smarkform"
  },"97": {
    "doc": "Download",
    "title": "Latest version",
    "content": ". | ESM: SmarkForm-0.5.0.esm.js | UMD: SmarkForm-0.5.0.umd.js | . ",
    "url": "/resources/download#latest-version",
    
    "relUrl": "/resources/download#latest-version"
  },"98": {
    "doc": "Download",
    "title": "Older versions",
    "content": "For older versions, switch to the appropriate tag from SmarkForm GitHub Repo and then you can find both, ESM and UMD modules under /dist directory. ",
    "url": "/resources/download#older-versions",
    
    "relUrl": "/resources/download#older-versions"
  },"99": {
    "doc": "Download",
    "title": "Other Resources",
    "content": " ",
    "url": "/resources/download#other-resources",
    
    "relUrl": "/resources/download#other-resources"
  },"100": {
    "doc": "Download",
    "title": "CSS",
    "content": "SmarkForm is a layout-agnostic library, so you are free to design your layout and styles to your liking. But, in case you liked the layout and styles of our Examples Section or just want some boilerplate to start from, here you have its CSS files: . | Layout: SmarkForm_layout-0.5.0.css | Styles: SmarkForm_styles-0.5.0.css | . To learn how to take advantage of them, check our examples source code. ",
    "url": "/resources/download#css",
    
    "relUrl": "/resources/download#css"
  },"101": {
    "doc": "Download",
    "title": "Boilerplate Template",
    "content": "Alternatively, if you want an empty template to start from the scratch but without worriying about HTML and CSS boilerplate, you can check out or empty template as a base code to begin with: . | Template: SmarkForm_template-0.5.0.html | . This template includes SmarkForm (in UMD format) and our example CSS files from their respective CDN resources (Check CDN Section for more information). This mean that you don‚Äôt need to worry about downloading them or adjusting any url. ‚Ä¶but, at the same time, if you don‚Äôt want to rely on CDN resources you will need to download them from this section and update the &lt;head&gt; section of this template accordingly. ",
    "url": "/resources/download#boilerplate-template",
    
    "relUrl": "/resources/download#boilerplate-template"
  },"102": {
    "doc": "CDN",
    "title": "CDN",
    "content": "üìñ Table of Contents . | SmarkForm . | Latest Version | Specific Version | . | Other Resources . | CSS | . | . ",
    "url": "/resources/CDN#cdn",
    
    "relUrl": "/resources/CDN#cdn"
  },"103": {
    "doc": "CDN",
    "title": "SmarkForm",
    "content": " ",
    "url": "/resources/CDN#smarkform",
    
    "relUrl": "/resources/CDN#smarkform"
  },"104": {
    "doc": "CDN",
    "title": "Latest Version",
    "content": "To get latest available SmarkForm version through CDN you can use following links: . | ESM: https://cdn.jsdelivr.net/npm/smarkform/dist/SmarkForm.esm.js | UMD: https://cdn.jsdelivr.net/npm/smarkform/dist/SmarkForm.umd.js | . ",
    "url": "/resources/CDN#latest-version",
    
    "relUrl": "/resources/CDN#latest-version"
  },"105": {
    "doc": "CDN",
    "title": "Specific Version",
    "content": "If you prefer to rely in specific version (let‚Äôs say 0.5.0) (recommended for production) you can use version-specific CDNs instaed: . | ESM: https://cdn.jsdelivr.net/npm/smarkform@0.5.0/dist/SmarkForm.esm.js | UMD: https://cdn.jsdelivr.net/npm/smarkform@0.5.0/dist/SmarkForm.umd.js | . See Getting Started section for more details: . ",
    "url": "/resources/CDN#specific-version",
    
    "relUrl": "/resources/CDN#specific-version"
  },"106": {
    "doc": "CDN",
    "title": "Other Resources",
    "content": " ",
    "url": "/resources/CDN#other-resources",
    
    "relUrl": "/resources/CDN#other-resources"
  },"107": {
    "doc": "CDN",
    "title": "CSS",
    "content": "As discussed in the Download Section, you can also find the CSS used in our Examples Section as CDN resources. Just insert the following lines in your &lt;head&gt; section. &lt;link rel='stylesheet' href='https://cdn.jsdelivr.net/gh/bitifet/SmarkForm@0.5.0/examples/smarkform_layout_sample.css'&gt; &lt;link rel='stylesheet' href='https://cdn.jsdelivr.net/gh/bitifet/SmarkForm@0.5.0/examples/smarkform_styles_sample.css'&gt; . ",
    "url": "/resources/CDN#css",
    
    "relUrl": "/resources/CDN#css"
  },"108": {
    "doc": "CDN",
    "title": "CDN",
    "content": " ",
    "url": "/resources/CDN",
    
    "relUrl": "/resources/CDN"
  },"109": {
    "doc": "Examples",
    "title": "Examples",
    "content": "Select: Complete Example TO-DO List Adventure Tracking Output HTML Js üñ•Ô∏è View FullScreen üíæ Download &lt;div class=\"SmarkForm\"&gt; &lt;section&gt; &lt;div class='form-group h1'&gt;Company&lt;/div&gt; &lt;div class='input-group'&gt; &lt;label&gt;Corporate Name&lt;/label&gt; &lt;input data-smark name='company' type='text' placeholder='Company Name'&gt; &lt;/div&gt; &lt;div class='input-group'&gt; &lt;label&gt;Address&lt;/label&gt; &lt;textarea data-smark name='address' placeholder='Address'&gt;&lt;/textarea&gt; &lt;/div&gt; &lt;div class='form-group'&gt; &lt;label&gt;City,State,Zip&lt;/label&gt; &lt;input data-smark name='city' placeholder='City' style='flex: 6'&gt; &lt;input data-smark name='state' placeholder='State' style='flex:1'&gt; &lt;input data-smark name='postCode' placeholder='Postal Code' style='flex:2'&gt; &lt;/div&gt; &lt;/section&gt; &lt;section&gt; &lt;div class='form-group h2'&gt;&lt;span class='foldButton' data-smark='{\"action\":\"fold\",\"context\":\"employees\",\"foldedClass\":\"folded\"}'&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Employees (&lt;/span&gt;&lt;span data-smark='{\"action\":\"count\",\"context\":\"employees\"}'&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;div class='form-group'&gt; &lt;div class='spacer'&gt;&lt;/div&gt; &lt;button data-smark='{\"action\":\"addItem\",\"context\":\"employees\",\"autoscroll\":\"self\"}' title='Add employee'&gt;‚ûï&lt;/button&gt; &lt;button data-smark='{\"action\":\"removeItem\",\"context\":\"employees\",\"keep_non_empty\":true}' title='Remove employees from bottom priorizing empties'&gt;‚ûñ&lt;/button&gt; &lt;button data-smark='{\"action\":\"removeItem\",\"context\":\"employees\",\"target\":\"*\",\"keep_non_empty\":true}' title='Clear all empty employees'&gt;üßπ&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class='form-group'&gt; &lt;div class='form-group' data-smark='{\"name\":\"employees\",\"type\":\"list\",\"exportEmpties\":true,\"sortable\":true}'&gt; &lt;fieldset class='full-width form-group aside reverse' data-smark='{\"exportEmpties\":false}'&gt; &lt;button class='inline' data-smark='{\"action\":\"removeItem\",\"failback\":\"clear\"}' title='Remove this employee'&gt;‚ûñ&lt;/button&gt; &lt;div class='form-group spacer'&gt; &lt;div class='form-group'&gt; &lt;div class='input-group'&gt; &lt;label&gt;First Name&lt;/label&gt; &lt;input data-smark name='name' placeholder='Name'&gt; &lt;/div&gt; &lt;div class='input-group'&gt; &lt;label&gt;Last Name&lt;/label&gt; &lt;input data-smark name='lastName' placeholder='Surnme'&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class='form-group'&gt; &lt;div class='input-group'&gt; &lt;label&gt;Date of Birth&lt;/label&gt; &lt;input data-smark type='date' name='birth' placeholder='dd/mm/yyyy'&gt; &lt;/div&gt; &lt;div class='input-group'&gt; &lt;label&gt;Salary&lt;/label&gt; &lt;input data-smark type='number' name='salary' step='0.01' placeholder='Euros'&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class='form-group'&gt; &lt;div class='input-group'&gt; &lt;label&gt;Telephones&lt;/label&gt; &lt;div data-smark='{\"name\":\"phones\",\"type\":\"list\",\"of\":\"input\",\"max_items\":4}'&gt; &lt;div class='singleton'&gt; &lt;button data-smark='{\"action\":\"addItem\"}' title='Add new item below'&gt;‚ûï&lt;/button&gt; &lt;input data-smark='data-smark' type='tel' placeholder='Telephone'/&gt; &lt;button data-smark='{\"action\":\"removeItem\",\"failback\":\"clear\"}' title='Remove this item'&gt;‚ûñ&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class='input-group'&gt; &lt;label&gt;Emails&lt;/label&gt; &lt;div data-smark='{\"name\":\"emails\",\"type\":\"list\",\"of\":\"input\",\"max_items\":4}'&gt; &lt;div class='singleton'&gt; &lt;button data-smark='{\"action\":\"addItem\"}' title='Add new item below'&gt;‚ûï&lt;/button&gt; &lt;input data-smark='data-smark' type='email' placeholder='Email'/&gt; &lt;button data-smark='{\"action\":\"removeItem\",\"failback\":\"clear\"}' title='Remove this item'&gt;‚ûñ&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/fieldset&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class='form-group f2'&gt; &lt;div class='spacer'&gt;&lt;/div&gt; &lt;button data-smark='{\"action\":\"addItem\",\"context\":\"employees\",\"autoscroll\":\"elegant\"}' title='Add employee'&gt;‚ûï&lt;/button&gt; &lt;button data-smark='{\"action\":\"removeItem\",\"context\":\"employees\",\"keep_non_empty\":true,\"autoscroll\":\"elegant\",\"failback\":\"clear\"}' title='Remove employees from bottom priorizing empties'&gt;‚ûñ&lt;/button&gt; &lt;button data-smark='{\"action\":\"removeItem\",\"context\":\"employees\",\"target\":\"*\",\"autoscroll\":\"elegant\",\"keep_non_empty\":true}' title='Clear all empty employees'&gt;üßπ&lt;/button&gt; &lt;/div&gt; &lt;/section&gt; &lt;section&gt; &lt;div class='form-group'&gt; &lt;div class='spacer'&gt;&lt;/div&gt; &lt;button data-smark='{\"action\":\"import\"}' title='Import (JSON) data'&gt;üìÇ Import&lt;/button&gt; &lt;button data-smark='{\"action\":\"empty\"}' title='Clear form data'&gt;‚ùå Cancel&lt;/button&gt; &lt;button data-smark='{\"action\":\"export\"}' title='Submit form data'&gt;üíæ Submit&lt;/button&gt; &lt;/div&gt; &lt;/section&gt; &lt;/div&gt; . &lt;div class=\"SmarkForm\"&gt; &lt;section&gt; &lt;div class='form-group h1 nowrap'&gt; &lt;div class='spacer'&gt;&lt;/div&gt; &lt;button data-smark='{\"action\":\"import\",\"context\":\"tasklist\"}'&gt;üìÇ Import (JSON)&lt;/button&gt; &lt;button data-smark='{\"action\":\"export\",\"context\":\"tasklist\"}'&gt;üíæ Export (JSON)&lt;/button&gt; &lt;/div&gt; &lt;div class='form-group' data-smark='{\"type\":\"list\",\"name\":\"tasklist\",\"sortable\":true,\"exportEmpties\":true,\"min_items\":0}'&gt; &lt;fieldset class='form-group aside reverse' data-smark='{\"exportEmpties\":false}'&gt; &lt;button class='inline' data-smark='{\"action\":\"removeItem\"}' title='Remove task'&gt;‚ùå&lt;/button&gt; &lt;div class='form-group spacer'&gt; &lt;div class='form-group'&gt; &lt;input data-smark name='title' type='text' placeholder='Task title'&gt; &lt;/div&gt; &lt;div class='form-group'&gt; &lt;div class='input-group'&gt; &lt;label&gt;Goals&lt;/label&gt; &lt;div data-smark='{\"name\":\"goals\",\"type\":\"list\",\"of\":\"input\",\"max_items\":100}'&gt; &lt;div class='singleton'&gt; &lt;button data-smark='{\"action\":\"addItem\"}' title='Add new item below'&gt;‚ûï&lt;/button&gt; &lt;input data-smark='data-smark' type='text' placeholder='New goal...'/&gt; &lt;button data-smark='{\"action\":\"removeItem\",\"failback\":\"clear\"}' title='Remove this item'&gt;‚ûñ&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/fieldset&gt; &lt;/div&gt; &lt;div class='form-group f1 nowrap' style='text-align: right'&gt; &lt;div class='spacer'&gt;&lt;/div&gt; &lt;button data-smark='{\"action\":\"empty\",\"context\":\"tasklist\",\"autoscroll\":\"elegant\"}' title='Clear form data'&gt;‚ùå Clear all&lt;/button&gt; &lt;button data-smark='{\"action\":\"removeItem\",\"context\":\"tasklist\",\"target\":\"*\",\"autoscroll\":\"elegant\",\"keep_non_empty\":true}' title='Clear all empty tasks'&gt;üßπ Clear empty&lt;/button&gt; &lt;button data-smark='{\"action\":\"addItem\",\"context\":\"tasklist\"}'&gt;‚ûï Add new task&lt;/button&gt; &lt;/div&gt; &lt;/section&gt; &lt;/div&gt; . &lt;div class=\"SmarkForm\"&gt; &lt;section&gt; &lt;h2&gt;Activity&lt;/h2&gt; &lt;div class='form-group'&gt; &lt;label&gt;Title&lt;/label&gt; &lt;input data-smark name='activity_name' type='text' placeholder='Name your planned activity...'&gt; &lt;/div&gt; &lt;div class='input-group'&gt; &lt;label&gt;Description&lt;/label&gt; &lt;textarea data-smark name='activity_description' placeholder='Brief description of your activity'&gt;&lt;/textarea&gt; &lt;/div&gt; &lt;h2&gt;Planning&lt;/h2&gt; &lt;h3&gt;Origin&lt;/h3&gt; &lt;div class='form-group' data-smark='{\"type\":\"form\",\"name\":\"origin\"}'&gt; &lt;input data-smark name='place' placeholder='Place'&gt; &lt;input data-smark name='city' placeholder='City'&gt; &lt;input data-smark name='date' type='date' placeholder='dd/mm/yyyy'&gt; &lt;input data-smark name='time' type='time' placeholder='hh:mm'&gt; &lt;/div&gt; &lt;h3&gt;Stops&lt;/h3&gt; &lt;div class='form-group' data-smark='{\"type\":\"list\",\"name\":\"stops\",\"min_items\":0,\"exportEmpties\":false}'&gt; &lt;div class='full-width form-group aside reverse'&gt; &lt;button class='inline' data-smark='{\"action\":\"removeItem\"}'&gt;-&lt;/button&gt; &lt;div class='form-group'&gt; &lt;input data-smark name='place' placeholder='Place'&gt; &lt;input data-smark name='city' placeholder='City'&gt; &lt;input data-smark name='date' type='date' placeholder='dd/mm/yyyy'&gt; &lt;input data-smark name='time' type='time' placeholder='hh:mm'&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class='form-group'&gt; &lt;div class='spacer'&gt;&lt;/div&gt; &lt;button class='inline' data-smark='{\"action\":\"addItem\",\"context\":\"stops\"}'&gt;Add Stop Place&lt;/button&gt; &lt;/div&gt; &lt;h3&gt;Destination&lt;/h3&gt; &lt;div class='form-group' data-smark='{\"type\":\"form\",\"name\":\"destination\"}'&gt; &lt;input data-smark name='place' placeholder='Place'&gt; &lt;input data-smark name='city' placeholder='City'&gt; &lt;input data-smark name='date' type='date' placeholder='dd/mm/yyyy'&gt; &lt;input data-smark name='time' type='time' placeholder='hh:mm'&gt; &lt;/div&gt; &lt;/section&gt; &lt;section&gt; &lt;h2&gt;Participants&lt;/h2&gt; &lt;h3&gt;Organizers&lt;/h3&gt; &lt;div class='form-group' data-smark='{\"type\":\"list\",\"name\":\"organizers\",\"exportEmpties\":false}'&gt; &lt;div class='full-width form-group aside reverse'&gt; &lt;button class='inline' data-smark='{\"action\":\"removeItem\"}'&gt;-&lt;/button&gt; &lt;div class='form-group spacer'&gt; &lt;div class='form-group'&gt; &lt;input style='flex: 6' data-smark name='name' placeholder='Name'&gt; &lt;input style='flex: 2' data-smark name='phone' type='tel' placeholder='Phone number'&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class='form-group'&gt; &lt;div class='spacer'&gt;&lt;/div&gt; &lt;button class='inline' data-smark='{\"action\":\"addItem\",\"context\":\"organizers\"}'&gt;Add Organizer&lt;/button&gt; &lt;/div&gt; &lt;h3&gt;Participants:&lt;/h3&gt; &lt;div class='form-group' data-smark='{\"type\":\"list\",\"name\":\"participants\",\"min_items\":0,\"exportEmpties\":false}'&gt; &lt;div class='full-width form-group aside reverse'&gt; &lt;button class='inline' data-smark='{\"action\":\"removeItem\"}'&gt;-&lt;/button&gt; &lt;div class='form-group spacer'&gt; &lt;div class='form-group'&gt; &lt;input style='flex: 6' data-smark name='name' placeholder='Name'&gt; &lt;input style='flex: 2' data-smark name='phone' type='tel' placeholder='Phone number'&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class='form-group'&gt; &lt;div class='spacer'&gt;&lt;/div&gt; &lt;button class='inline' data-smark='{\"action\":\"addItem\",\"context\":\"participants\"}'&gt;Add Participant&lt;/button&gt; &lt;/div&gt; &lt;/section&gt; &lt;section&gt; &lt;div class='form-group'&gt; &lt;div class='spacer'&gt;&lt;/div&gt; &lt;button data-smark='{\"action\":\"import\"}' title='Import (JSON) data'&gt;üìÇ Import&lt;/button&gt; &lt;button data-smark='{\"action\":\"empty\"}' title='Clear form data'&gt;‚ùå Cancel&lt;/button&gt; &lt;button data-smark='{\"action\":\"export\"}' title='Submit form data'&gt;üíæ Submit&lt;/button&gt; &lt;/div&gt; &lt;/section&gt; &lt;/div&gt; . // Essential: // ========== // SmarkForm instantiation: const myForm = new SmarkForm(document.querySelector(\"#main-form\")); // Import / Export data handling: // ============================== // Do Something on export action: myForm.on(\"AfterAction_export\" , ({data})=&gt;alert (JSON.stringify(data, null, 4)) ); // Fetching data on import action (example): myForm.on(\"BeforeAction_import\", (options) =&gt; { let data = prompt('Provide JSON data'); try { options.data = JSON.parse(data); } catch (err) { if (data.length) { alert ('‚ö†Ô∏è Invalid JSON!!'); data = null; // Emulate prompt cancel. } else { data = {}; // Drop form contents }; }; if (data === null) options.preventDefault(); }); // Aesthetic enhancements: // ======================= // Ask for confirm on empty action myForm.on(\"BeforeAction_empty\", async ({context, preventDefault}) =&gt; { if ( ! await context.isEmpty() // Don't even ask if already empty &amp;&amp; ! confirm(\"Are you sure?\") // Ask for confirmation ) preventDefault(); // Abort if user cancelled }); // Allow for list items addition/removal CSS animation: // (Add and remove \"ingoing\", \"ongoing\" and \"outgoint\" CSS classes) myForm .onAll(\"addItem\", function({ newItemTarget, onRendered, }) { newItemTarget.classList.add(\"ingoing\"); onRendered(()=&gt;{ newItemTarget.classList.remove(\"ingoing\") newItemTarget.classList.add(\"ongoing\"); }); }) .onAll(\"removeItem\", async function({ oldItemTarget, onRemmoved, }) { oldItemTarget.classList.remove(\"ongoing\"); oldItemTarget.classList.add(\"outgoing\"); // Await for transition to be finished before item removal: const [duration, multiplier = 1000] = window.getComputedStyle(oldItemTarget) .getPropertyValue('transition-duration') .slice(0,-1).replace(\"m\",\"/1\") .split(\"/\") .map(Number) ; await new Promise(resolve=&gt;setTimeout( resolve , duration * multiplier )); }) ; . // Essential: // ========== // SmarkForm instantiation: const myForm = new SmarkForm(document.querySelector(\"#main-form\")); // Import / Export data handling: // ============================== // Do Something on export action: myForm.on(\"AfterAction_export\" , ({data})=&gt;alert (JSON.stringify(data, null, 4)) ); // Fetching data on import action (example): myForm.on(\"BeforeAction_import\", (options) =&gt; { let data = prompt('Provide JSON data'); try { options.data = JSON.parse(data); } catch (err) { if (data.length) { alert ('‚ö†Ô∏è Invalid JSON!!'); data = null; // Emulate prompt cancel. } else { data = {}; // Drop form contents }; }; if (data === null) options.preventDefault(); }); // Aesthetic enhancements: // ======================= // Ask for confirm on empty action myForm.on(\"BeforeAction_empty\", async ({context, preventDefault}) =&gt; { if ( ! await context.isEmpty() // Don't even ask if already empty &amp;&amp; ! confirm(\"Are you sure?\") // Ask for confirmation ) preventDefault(); // Abort if user cancelled }); // Allow for list items addition/removal CSS animation: // (Add and remove \"ingoing\", \"ongoing\" and \"outgoint\" CSS classes) myForm .onAll(\"addItem\", function({ newItemTarget, onRendered, }) { newItemTarget.classList.add(\"ingoing\"); onRendered(()=&gt;{ newItemTarget.classList.remove(\"ingoing\") newItemTarget.classList.add(\"ongoing\"); }); }) .onAll(\"removeItem\", async function({ oldItemTarget, onRemmoved, }) { oldItemTarget.classList.remove(\"ongoing\"); oldItemTarget.classList.add(\"outgoing\"); // Await for transition to be finished before item removal: const [duration, multiplier = 1000] = window.getComputedStyle(oldItemTarget) .getPropertyValue('transition-duration') .slice(0,-1).replace(\"m\",\"/1\") .split(\"/\") .map(Number) ; await new Promise(resolve=&gt;setTimeout( resolve , duration * multiplier )); }) ; . // Essential: // ========== // SmarkForm instantiation: const myForm = new SmarkForm(document.querySelector(\"#main-form\")); // Import / Export data handling: // ============================== // Do Something on export action: myForm.on(\"AfterAction_export\" , ({data})=&gt;alert (JSON.stringify(data, null, 4)) ); // Fetching data on import action (example): myForm.on(\"BeforeAction_import\", (options) =&gt; { let data = prompt('Provide JSON data'); try { options.data = JSON.parse(data); } catch (err) { if (data.length) { alert ('‚ö†Ô∏è Invalid JSON!!'); data = null; // Emulate prompt cancel. } else { data = {}; // Drop form contents }; }; if (data === null) options.preventDefault(); }); // Aesthetic enhancements: // ======================= // Ask for confirm on empty action myForm.on(\"BeforeAction_empty\", async ({context, preventDefault}) =&gt; { if ( ! await context.isEmpty() // Don't even ask if already empty &amp;&amp; ! confirm(\"Are you sure?\") // Ask for confirmation ) preventDefault(); // Abort if user cancelled }); // Allow for list items addition/removal CSS animation: // (Add and remove \"ingoing\", \"ongoing\" and \"outgoint\" CSS classes) myForm .onAll(\"addItem\", function({ newItemTarget, onRendered, }) { newItemTarget.classList.add(\"ingoing\"); onRendered(()=&gt;{ newItemTarget.classList.remove(\"ingoing\") newItemTarget.classList.add(\"ongoing\"); }); }) .onAll(\"removeItem\", async function({ oldItemTarget, onRemmoved, }) { oldItemTarget.classList.remove(\"ongoing\"); oldItemTarget.classList.add(\"outgoing\"); // Await for transition to be finished before item removal: const [duration, multiplier = 1000] = window.getComputedStyle(oldItemTarget) .getPropertyValue('transition-duration') .slice(0,-1).replace(\"m\",\"/1\") .split(\"/\") .map(Number) ; await new Promise(resolve=&gt;setTimeout( resolve , duration * multiplier )); }) ; . ",
    "url": "/resources/examples",
    
    "relUrl": "/resources/examples"
  },"110": {
    "doc": "CodePen",
    "title": "CodePen",
    "content": "You can also see SmarkForm in action in this complete CodePen example and even fork and play with all SmarkForm features: . See the Pen SmarkForm Complete Example by Joan Miquel Torres (@bitifet) on CodePen. üëâ See also SmarkForm Examples collection from bare minimal to more complex examples in CodePen. ",
    "url": "/resources/CodePen",
    
    "relUrl": "/resources/CodePen"
  },"111": {
    "doc": "Status",
    "title": "Status",
    "content": "üìñ Table of Contents SmarkForm implementation is stable and fully functional, but not all initially planned requirements are yet implemented. Hence, it‚Äôs not yet in the 1.0.0 version. It still lacks two of its planned key features: . | The API Interface. | The :link: &lt;select&gt; component type. | . Even this documentation is not yet finished and may be incomplete, inaccurate or outdated in many of its sections. üöß Ôº∑ÔºØÔº≤Ôº´ Ôº©Ôº≥ Ôº©ÔºÆ Ôº∞Ôº≤ÔºØÔºßÔº≤Ôº•Ôº≥Ôº≥‚Ä¶ üöß ¬†¬†üòâ . üëâ See üîó RoadMap Section for more details‚Ä¶ . ",
    "url": "/roadmap/status",
    
    "relUrl": "/roadmap/status"
  },"112": {
    "doc": "RoadMap",
    "title": "RoadMap",
    "content": "üìñ Table of Contents . | Implementation !(70%) . | Core functionality. | . | . ",
    "url": "/roadmap/roadmap",
    
    "relUrl": "/roadmap/roadmap"
  },"113": {
    "doc": "RoadMap",
    "title": "Implementation ",
    "content": " ",
    "url": "/roadmap/roadmap#implementation-",
    
    "relUrl": "/roadmap/roadmap#implementation-"
  },"114": {
    "doc": "RoadMap",
    "title": "Core functionality.",
    "content": ". SmarkForm Core functionality is in mature state. Almost all initially planed features are implemented and working well. The only exception is the ‚ÄúAPI interface‚Äù which will allow future select component type to fetch its optinons dynamically depending on the value of other fields (See Select Component in Core component types section). üöß To be continued‚Ä¶ . Core component types and actions. Form Component Type Implementation complete. List Component Type Implementation complete. Singleton Component Type Implementation complete. Input Component Type Implementation complete. Select Component Type. Select component will be capable of loading its options from a remote API call by passing its *src* property to so called \"API Interface\". The *API Interface* will allow *select* (and other future components) to fetch their options dynamically from an external API and react to any change in any other fields whose value were used as argument to the API call. For detailed explanation see: [Select Component Type](type_select.md). Number Component Type Not yet implemented (but comming soon). It will just wrap input component to export as number instead of string (we will use a separate component to respect original ```` tag behaviour which returns text even if its *type* attribute is \"number\". Date Component Type Not yet implemented (but comming soon). Trigger (Special) Component Type Fully functional but only for regular clicks. Special behaviours for right / middle / (other) cliks, keyboard events, etc... may be eventually implemented in the future. But not a priority yet. Automated tests. A mature testing structure with mocha and puppetter is set up to easily implement tests over any SmarkForm feature. But only a few actual tests are implemented yet. More tests need to be developed to ensure all functionality keeps working while implementation advances. Documentation. Introductory README file is quite mature. But usage and API documentation still needs a lot of work... üìå ‚Ä¶And many more amazing ideas in the TODO list. ",
    "url": "/roadmap/roadmap#core-functionality",
    
    "relUrl": "/roadmap/roadmap#core-functionality"
  },"115": {
    "doc": "TO-DO List",
    "title": "TO-DO List",
    "content": "üìñ Table of Contents . | UX Improvements . | üëâ Keyboard Shortcuts | . | Pending core features . | üëâ The API interface | üëâ src property for import action | . | Pending core components . | üëâ The ¬´select¬ª component | üëâ The ¬´multiform¬ª component | . | Other possible features . | üí° Implement Focus subsystem. Let‚Äôs say: | üí° Recursive lists | . | New non-core components . | üí° Implement UNDO component. | üí° Implement Table Of Contents component. | . | Spare Ideas . | Implement download action | . | . ",
    "url": "/roadmap/TODO",
    
    "relUrl": "/roadmap/TODO"
  },"116": {
    "doc": "TO-DO List",
    "title": "UX Improvements",
    "content": " ",
    "url": "/roadmap/TODO#ux-improvements",
    
    "relUrl": "/roadmap/TODO#ux-improvements"
  },"117": {
    "doc": "TO-DO List",
    "title": "üëâ Keyboard Shortcuts",
    "content": ". | Allow component types to capture keyboard events to trigger actions. | I.e. Ctrl+‚Äù+‚Äù in list item may add new item below (trigger addItem action with that item as target). | I.e. Ctrl+‚Äù-‚Äú in list item may remove the item containing it (trigger removeItem action with that item as target). | . ",
    "url": "/roadmap/TODO#-keyboard-shortcuts",
    
    "relUrl": "/roadmap/TODO#-keyboard-shortcuts"
  },"118": {
    "doc": "TO-DO List",
    "title": "Pending core features",
    "content": " ",
    "url": "/roadmap/TODO#pending-core-features",
    
    "relUrl": "/roadmap/TODO#pending-core-features"
  },"119": {
    "doc": "TO-DO List",
    "title": "üëâ The API interface",
    "content": "Bla bla bla‚Ä¶ . ",
    "url": "/roadmap/TODO#-the-api-interface",
    
    "relUrl": "/roadmap/TODO#-the-api-interface"
  },"120": {
    "doc": "TO-DO List",
    "title": "üëâ src property for import action",
    "content": "Taking advantadge of the API interface it will not only allow for loading data from static source: . The API interface will allow to use other fields values as arguments for the API request to perform everty time the action is triggered. ",
    "url": "/roadmap/TODO#-src-property-for-import-action",
    
    "relUrl": "/roadmap/TODO#-src-property-for-import-action"
  },"121": {
    "doc": "TO-DO List",
    "title": "Pending core components",
    "content": " ",
    "url": "/roadmap/TODO#pending-core-components",
    
    "relUrl": "/roadmap/TODO#pending-core-components"
  },"122": {
    "doc": "TO-DO List",
    "title": "üëâ The ¬´select¬ª component",
    "content": "‚Ä¶ . ",
    "url": "/roadmap/TODO#-the-select-component",
    
    "relUrl": "/roadmap/TODO#-the-select-component"
  },"123": {
    "doc": "TO-DO List",
    "title": "üëâ The ¬´multiform¬ª component",
    "content": ". | Multiple subform templates (every direct child of its original layout) internally stored (likewise lists item template‚Ä¶). | Only one ‚Äúactive‚Äù (actually inserted in DOM) at the same time (interchangeablilityy). | import() and export() methods work always over currently selected subform. | Each subform must include a (or any other input smart type) tag whose name should match some ‚Äúselector‚Äù property in the options object passed to mulitform component (data-smark attribute) and whose value should decide wich template is actually used (making imports and exports consistent thanks to this field). | . ",
    "url": "/roadmap/TODO#-the-multiform-component",
    
    "relUrl": "/roadmap/TODO#-the-multiform-component"
  },"124": {
    "doc": "TO-DO List",
    "title": "Other possible features",
    "content": " ",
    "url": "/roadmap/TODO#other-possible-features",
    
    "relUrl": "/roadmap/TODO#other-possible-features"
  },"125": {
    "doc": "TO-DO List",
    "title": "üí° Implement Focus subsystem. Let‚Äôs say:",
    "content": ". | AddItem send focus to added Item. | This item (type) in turn, may re-send it to inner parts (i.e.: first input for forms, etc‚Ä¶) | . ",
    "url": "/roadmap/TODO#-implement-focus-subsystem-lets-say",
    
    "relUrl": "/roadmap/TODO#-implement-focus-subsystem-lets-say"
  },"126": {
    "doc": "TO-DO List",
    "title": "üí° Recursive lists",
    "content": ". | recursive = (path) (Must be parent) | min_items = 0 (forcibly) | max_recursion = (optional) Self item will be removed from template when reached. | . ",
    "url": "/roadmap/TODO#-recursive-lists",
    
    "relUrl": "/roadmap/TODO#-recursive-lists"
  },"127": {
    "doc": "TO-DO List",
    "title": "New non-core components",
    "content": "The following are ideas for possible future components (not necessarily and in most cases they won‚Äôt be core components but just plugable components in their own repository. ",
    "url": "/roadmap/TODO#new-non-core-components",
    
    "relUrl": "/roadmap/TODO#new-non-core-components"
  },"128": {
    "doc": "TO-DO List",
    "title": "üí° Implement UNDO component.",
    "content": ". | Contains single component (form, list, input‚Ä¶). | Acts as a ‚Äúman in the middle‚Äù. | Listen to the (future) component‚Äôs ‚Äúchange‚Äù events to capture (export) and store changes. | Make its own changes‚Äô events distinguishable from regular ones (to avoid re-caching). | Provide additional ‚Äúundo‚Äù and ‚Äúredo‚Äù actions. | Etc‚Ä¶ | . ",
    "url": "/roadmap/TODO#-implement-undo-component",
    
    "relUrl": "/roadmap/TODO#-implement-undo-component"
  },"129": {
    "doc": "TO-DO List",
    "title": "üí° Implement Table Of Contents component.",
    "content": ". | Scan targetted component recursively. | Refresh on every change (add or remove items). | Show only components with a ‚Äútoc-section‚Äù property. | Allow navigating to every secton through their (full path) id‚Äôs. | Implement a ‚Äúreturn to TOC‚Äù actions. | Stop scanning on compoenents containing a self-targetted TOC. | . ",
    "url": "/roadmap/TODO#-implement-table-of-contents-component",
    
    "relUrl": "/roadmap/TODO#-implement-table-of-contents-component"
  },"130": {
    "doc": "TO-DO List",
    "title": "Spare Ideas",
    "content": "Spare (not yet mature) random ideas‚Ä¶ . ",
    "url": "/roadmap/TODO#spare-ideas",
    
    "relUrl": "/roadmap/TODO#spare-ideas"
  },"131": {
    "doc": "TO-DO List",
    "title": "Implement download action",
    "content": ". | Implement in lib/component.js. | Rely on (each type)‚Äôs export action. | Allow to specify file name (maybe even prompt‚Ä¶) | Downloads (exported) json by default | ‚Ä¶but allow for transformation filters to generate other kinds of data from json input. | . Sample code for download fuctionality: . function download(fileName, payload, ctype = \"text/plain\", charset=\"utf-8\") { var dldAnchor = document.createElement('a'); dldAnchor.setAttribute('href', `data:${ctype};charset=${charset},${encodeURIComponent(payload)}`); dldAnchor.setAttribute('download', fileName); dldAnchor.style.display = 'none'; document.body.appendChild(dldAnchor); dldAnchor.click(); document.body.removeChild(dldAnchor); } // Usage example download(myFile.json, {foo: \"bar\"}); . ",
    "url": "/roadmap/TODO#implement-download-action",
    
    "relUrl": "/roadmap/TODO#implement-download-action"
  },"132": {
    "doc": "Support",
    "title": "Support",
    "content": "üöß Ôº∑ÔºØÔº≤Ôº´ Ôº©ÔºÆ Ôº∞Ôº≤ÔºØÔºßÔº≤Ôº•Ôº≥Ôº≥‚Ä¶ üöß . ",
    "url": "/community/support",
    
    "relUrl": "/community/support"
  },"133": {
    "doc": "Contributing",
    "title": "Contributing",
    "content": "üìñ Table of Contents . | Scripts . | npm run build | npm run dev | npm run test | npm run doc | . | Code of Conduct | Help | . I appreciate your interest in contributing. Before you get started, please read this guide to understand how you can participate in the development of the project. üöß Ôº∑ÔºØÔº≤Ôº´ Ôº©ÔºÆ Ôº∞Ôº≤ÔºØÔºßÔº≤Ôº•Ôº≥Ôº≥‚Ä¶ üöß . This guide is still in early stage. Please, contact me if you have any questions or suggestions. ",
    "url": "/community/contributing",
    
    "relUrl": "/community/contributing"
  },"134": {
    "doc": "Contributing",
    "title": "Scripts",
    "content": "In order to facilitate the development process, the scripts section of package.json file define the following commands: . ",
    "url": "/community/contributing#scripts",
    
    "relUrl": "/community/contributing#scripts"
  },"135": {
    "doc": "Contributing",
    "title": "npm run build",
    "content": "Runs the building process of SmarkForm library. It creates the follwing files: . | SmarkForm.esm.js - SmarkForm ESM module. | SmarkForm.umd.js - SmarkForm UMD package. | SmarkForm.esm.js.map and SmarkForm.umd.js.map - Sourcemap files for that modules. | . Example: . $ npm run build &gt; smarkform@0.4.0 build &gt; rollup -c --environment BUILD:production src/main.js ‚Üí dist/SmarkForm.esm.js, dist/SmarkForm.umd.js... Browserslist: caniuse-lite is outdated. Please run: npx update-browserslist-db@latest Why you should do it regularly: https://github.com/browserslist/update-db#readme created dist/SmarkForm.esm.js, dist/SmarkForm.umd.js in 2s src/examples/index.js ‚Üí tmp/index.js... (!) Generated an empty chunk index created tmp/index.js in 220ms . ",
    "url": "/community/contributing#npm-run-build",
    
    "relUrl": "/community/contributing#npm-run-build"
  },"136": {
    "doc": "Contributing",
    "title": "npm run dev",
    "content": "Runs the building process in watch mode so output files are regenerated every time single source file is modified and starts a simple http server to ease checking that generated examples work propperly with them. That is: . | Builds both ESM and UMD modules into /dist. | Builds sourcemap files for them. | Watches files and rebuilds at every change. | Runs http server to ease inspection. | Shows the urls to access http server. | . Example: . $ npm run dev &gt; smarkform@0.4.0 dev &gt; concurrently -n server,rollup \"http-server --no-dotfiles -c-1\" \"rollup -c -w\" [server] Starting up http-server, serving ./ [server] [server] http-server version: 14.1.1 [server] [server] http-server settings: [server] CORS: disabled [server] Cache: -1 seconds [server] Connection Timeout: 120 seconds [server] Directory Listings: visible [server] AutoIndex: visible [server] Serve GZIP Files: false [server] Serve Brotli Files: false [server] Default File Extension: none [server] [server] Available on: [server] http://127.0.0.1:8080 [server] http://192.168.1.10:8080 [server] Hit CTRL-C to stop the server [server] [rollup] rollup v4.18.0 [rollup] bundles src/main.js ‚Üí dist/SmarkForm.esm.js, dist/SmarkForm.umd.js... [rollup] created dist/SmarkForm.esm.js, dist/SmarkForm.umd.js in 1.7s [rollup] bundles src/examples/index.js ‚Üí tmp/index.js... [rollup] (!) Generated an empty chunk [rollup] \"index\" [rollup] created tmp/index.js in 248ms . üìå Don‚Äôt mind about the Generated an empty chunk warning: It‚Äôs by purpose because I didn‚Äôt found a way to produce html files with rollup without a js entry file. Let me know if you have a better approach. ",
    "url": "/community/contributing#npm-run-dev",
    
    "relUrl": "/community/contributing#npm-run-dev"
  },"137": {
    "doc": "Contributing",
    "title": "npm run test",
    "content": "Runs existing tests. Example: . joanmi@constructor:~/.../lib/SmarkForm$ npm run test &gt; smarkform@0.4.0 pretest &gt; npm run build &gt; smarkform@0.4.0 build &gt; rollup -c --environment BUILD:production src/main.js ‚Üí dist/SmarkForm.esm.js, dist/SmarkForm.umd.js... created dist/SmarkForm.esm.js, dist/SmarkForm.umd.js in 1.8s src/examples/index.js ‚Üí tmp/index.js... (!) Generated an empty chunk \"index\" created tmp/index.js in 245ms &gt; smarkform@0.4.0 test &gt; mocha General Functionality Tests ‚úî Document loaded ‚úî Basic introspection works List Component Type Test ‚úî addItem action works ‚úî removeItem action works ‚úî min_items limit applies ‚úî max_items limit applies ‚úî Imports correctly ‚úî Exports correctly 8 passing (2s) . ",
    "url": "/community/contributing#npm-run-test",
    
    "relUrl": "/community/contributing#npm-run-test"
  },"138": {
    "doc": "Contributing",
    "title": "npm run doc",
    "content": "SmarkForm documentation is published at: https://smarkform.bitifet.net. It is build with Jekyll and the Just the Docs theme and hosted in GitHub Pages. Source files can be found in the /docs directory of this repository. To compile / see the results, you can run the following command: . npm run doc . Example: . $ npm run doc &gt; smarkform@0.4.0 doc &gt; cd docs &amp;&amp; bundle install &amp;&amp; bundle exec jekyll serve --livereload Using rake 13.0.6 Using public_suffix 5.0.3 Using addressable 2.8.5 Using bundler 2.3.26 Using colorator 1.1.0 Using concurrent-ruby 1.2.2 Using eventmachine 1.2.7 Using http_parser.rb 0.8.0 Using em-websocket 0.5.3 Using ffi 1.15.5 Using forwardable-extended 2.6.0 Using google-protobuf 3.24.3 (x86_64-linux) Using i18n 1.14.1 Using sass-embedded 1.68.0 Using jekyll-sass-converter 3.0.0 Using rb-fsevent 0.11.2 Using rb-inotify 0.10.1 Using listen 3.8.0 Using jekyll-watch 2.2.1 Using rexml 3.2.6 Using kramdown 2.4.0 Using kramdown-parser-gfm 1.1.0 Using liquid 4.0.4 Using mercenary 0.4.0 Using pathutil 0.16.2 Using rouge 4.1.3 Using safe_yaml 1.0.5 Using unicode-display_width 2.4.2 Using terminal-table 3.0.2 Using webrick 1.8.1 Using jekyll 4.3.2 Using jekyll-include-cache 0.2.1 Using jekyll-seo-tag 2.8.0 Using just-the-docs 0.6.2 Bundle complete! 2 Gemfile dependencies, 34 gems now installed. Use `bundle info [gemname]` to see where a bundled gem is installed. Configuration file: /home/joanmi/Nextcloud/prj/lib/SmarkForm/docs/_config.yml Source: /home/joanmi/Nextcloud/prj/lib/SmarkForm/docs Destination: /home/joanmi/Nextcloud/prj/lib/SmarkForm/docs/_site Incremental build: disabled. Enable with --incremental Generating... done in 2.055 seconds. Auto-regeneration: enabled for '/home/joanmi/Nextcloud/prj/lib/SmarkForm/docs' ** ERROR: directory is already being watched! ** Directory: /home/joanmi/Nextcloud/prj/lib/SmarkForm/docs/_resources/examples is already being watched through: /home/joanmi/Nextcloud/prj/lib/SmarkForm/examples MORE INFO: https://github.com/guard/listen/blob/master/README.md LiveReload address: http://0.0.0.0:35729 Server address: http://0.0.0.0:4000 Server running... press ctrl-c to stop. ",
    "url": "/community/contributing#npm-run-doc",
    
    "relUrl": "/community/contributing#npm-run-doc"
  },"139": {
    "doc": "Contributing",
    "title": "Code of Conduct",
    "content": "Please be respectful towards other contributors and maintain a positive collaborative environment. The following behaviors will not be tolerated: . | Offensive or disrespectful comments. | SPAM or unauthorized advertising. | Non-constructive or destabilizing behavior. | . ",
    "url": "/community/contributing#code-of-conduct",
    
    "relUrl": "/community/contributing#code-of-conduct"
  },"140": {
    "doc": "Contributing",
    "title": "Help",
    "content": "If you have any questions or need assistance, please feel free to reach out to us through the Issues or by emailing joanmi@gmail.com. Thank you for contributing! . ",
    "url": "/community/contributing#help",
    
    "relUrl": "/community/contributing#help"
  },"141": {
    "doc": "License",
    "title": "License",
    "content": " ",
    "url": "/community/license",
    
    "relUrl": "/community/license"
  },"142": {
    "doc": "License",
    "title": "MIT License",
    "content": "Copyright (c) 2023 Joan Miquel Torres Rigo joanmi@gmail.com . Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ‚ÄúSoftware‚Äù), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: . The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ‚ÄúAS IS‚Äù, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ",
    "url": "/community/license#mit-license",
    
    "relUrl": "/community/license#mit-license"
  },"143": {
    "doc": "Contact",
    "title": "Contact",
    "content": "üöß Ôº∑ÔºØÔº≤Ôº´ Ôº©ÔºÆ Ôº∞Ôº≤ÔºØÔºßÔº≤Ôº•Ôº≥Ôº≥‚Ä¶ üöß . ",
    "url": "/community/contact",
    
    "relUrl": "/community/contact"
  }
}
