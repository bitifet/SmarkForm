script.

    document.addEventListener('DOMContentLoaded', function() {

        // <!-- BEGIN controller sample-->

        // Essential:
        // ==========

        // SmarkForm instantiation:
        const myForm = new SmarkForm(document.querySelector("#main-form"));


        // Import / Export data handling:
        // ==============================

        // Do Something on export action:
        myForm.on("AfterAction_export"
            , ({data})=>alert (JSON.stringify(data, null, 4))
        );

        // Fetching data on import action (example):
        myForm.on("BeforeAction_import", (options) => {
            let data = prompt('Provide JSON data');
            try {
                options.data = JSON.parse(data);
            } catch (err) {
                if (data.length) {
                    alert ('⚠️  Invalid JSON!!');
                    data = null; // Emulate prompt cancel.
                } else {
                    data = {}; // Drop form contents
                };
            };
            if (data === null) options.preventDefault();
        });


        // Aesthetic enhancements:
        // =======================

        // Ask for confirm on clear action
        myForm.on("BeforeAction_clear", async ({context, preventDefault}) => {

            // Ask for confirmation:
            if (
                context.getPath() == "/"      // Only for the whole form
                && ! await context.isEmpty()  // Don't even ask if already empty
                && ! confirm("Are you sure?")
            ) preventDefault(); // Abort if user cancelled
        });

        // Allow for list items addition/removal CSS animation:
        // (Propperly and/remove "animated_item" and "ongoing" CSS classes)
        const delay = ms=>new Promise(resolve=>setTimeout(resolve, ms));
        myForm.on("afterRender", async function(ev) {
            if (ev.context.parent?.options.type !== "list") return; /* Only for list items */
            const item = ev.context.targetNode;
            item.classList.add("animated_item");
            await delay(1); /* Important: Allow DOM to update */
            item.classList.add("ongoing");
        });
        myForm.on("beforeUnrender", async function(ev) {
            if (ev.context.parent?.options.type !== "list") return; /* Only for list items */
            const item = ev.context.targetNode;
            item.classList.remove("ongoing");
            /* Await for transition to be finished before item removal: */
            await delay(150);
        });

        // <!-- END controller sample-->

    });
