script.

    document.addEventListener('DOMContentLoaded', function() {

        // <!-- BEGIN controller sample-->

        // Essential:
        // ==========

        // SmarkForm instantiation:
        const myForm = new SmarkForm(document.querySelector("#main-form"));


        // Import / Export data handling:
        // ==============================

        // Do Something on export action:
        myForm.on("AfterAction_export"
            , ({data})=>alert (JSON.stringify(data, null, 4))
        );

        // Fetching data on import action (example):
        myForm.on("BeforeAction_import", (options) => {
            let data = prompt('Provide JSON data');
            try {
                options.data = JSON.parse(data);
            } catch (err) {
                if (data.length) {
                    alert ('⚠️  Invalid JSON!!');
                    data = null; // Emulate prompt cancel.
                } else {
                    data = {}; // Drop form contents
                };
            };
            if (data === null) options.preventDefault();
        });


        // Aesthetic enhancements:
        // =======================

        // Ask for confirm on empty action
        myForm.on("BeforeAction_empty", async ({context, preventDefault}) => {
            if (
                ! await context.isEmpty() // Don't even ask if already empty
                && ! confirm("Are you sure?") // Ask for confirmation
            ) preventDefault(); // Abort if user cancelled
        });

        // Allow for list items addition/removal CSS animation:
        // (Add and remove "ingoing", "ongoing" and "outgoint" CSS classes)
        myForm
            .onAll("addItem", function({
                newItemTarget,
                onRendered,
            }) {
                newItemTarget.classList.add("ingoing");
                onRendered(()=>{
                    newItemTarget.classList.remove("ingoing")
                    newItemTarget.classList.add("ongoing");
                });
            })
            .onAll("removeItem", async function({
                oldItemTarget,
                onRemmoved,
            }) {
                oldItemTarget.classList.remove("ongoing");
                oldItemTarget.classList.add("outgoing");

                // Await for transition to be finished before item removal:
                const [duration, multiplier = 1000] = window.getComputedStyle(oldItemTarget)
                    .getPropertyValue('transition-duration')
                    .slice(0,-1).replace("m","/1")
                    .split("/")
                    .map(Number)
                ;
                await new Promise(resolve=>setTimeout(
                    resolve
                    , duration * multiplier
                ));
            })
        ;

        // <!-- END controller sample-->

    });
